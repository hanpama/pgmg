{{- define "table_model" -}}
// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package {{ .Name }}

import (
	"encoding/json"
	{{ range $i, $d := .Dependencies -}}
	"{{$d}}"
	{{ end -}}
)

type Record struct {
  {{- range $i, $p := .Properties}}
    {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
	{{- end}}
}

{{ range $i, $key := .Keys }}
type {{$key.CapitalName}} struct {
	{{- range $i, $e := $key.Properties}}
	{{$e.CapitalName}} {{$e.SelectType}} `json:"{{$e.SQLName}}"`
	{{- end}}
}
{{- end }}

{{ range $i, $v := .Properties }}
type {{$v.CapitalName}} {{$v.BaseType}}
{{- end}}


func (r *Record) Receive() []interface{} {
	return []interface{}{
    {{ range $i, $p := .Properties -}}
		&r.{{$p.CapitalName}},
		{{ end }}
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	{{ range $i, $p := .Properties }}{{ if $p.InsertRequired -}}
	{{ $p.LowerName }} {{ $p.CapitalName }},
	{{ end }}{{ end -}}
	attrs ...attribute,
) Values {
	return append(Values{
		{{ range $i, $p := .Properties }}{{ if $p.InsertRequired -}}
		{{ $p.LowerName }},
		{{ end }}{{- end -}}
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
  ApplyTo(*Record)
  Column() string
  Value() interface{}
}

{{- range $i, $v := .Properties }}
func (v {{$v.CapitalName}}) ApplyTo(r *Record)  { r.{{$v.CapitalName}} = ({{$v.SelectType}})({{ if $v.SelectNullable }}&{{end}}v) }
func (v {{$v.CapitalName}}) Column() string     { return "{{$v.SQLName}}" }
func (v {{$v.CapitalName}}) Value() interface{} { return ({{$v.BaseType}})(v) }
{{- end}}

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}

{{- end -}}