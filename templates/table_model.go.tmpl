{{- define "table_model" -}}{{ $m := .Model }}
// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package {{ .PackageName }}

import (
	"encoding/json"
	{{ range $i, $d := $m.Dependencies -}}
	"{{$d}}"
	{{ end }}
	"github.com/hanpama/pgmg/dsl"
)

type {{$m.LowerName}}Table struct {
	dsl.TableReference
	{{- range $i, $p := $m.Properties}}
    {{$p.CapitalName}} dsl.ColumnReference
	{{- end}}
}

func new{{$m.CapitalName}}Table(alias string) *{{$m.LowerName}}Table {
	table := dsl.TableReference{TableSchema: `{{$m.Schema}}`, TableName: `{{$m.SQLName}}`, Alias: alias}
	return &{{$m.LowerName}}Table{
		table,
		{{- range $i, $p := $m.Properties}}
		dsl.ColumnReference{TableReference: table, ColumnName: "{{$p.SQLName}}"},
		{{- end}}
	}
}

// {{$m.CapitalName}} represents table {{$m.SQLName}}
var {{$m.CapitalName}} = new{{$m.CapitalName}}Table("")

func (t *{{$m.LowerName}}Table) As(alias string) *{{$m.LowerName}}Table { return new{{$m.CapitalName}}Table(alias) }
func (t *{{$m.LowerName}}Table) AllColumns() []interface{} {
	return []interface{}{
		{{- range $i, $p := $m.Properties}}{{if $i}}, {{end}}t.{{$p.CapitalName}}{{end -}}
	}
}

type {{$m.LowerName}}ColumnValue interface {
	{{$m.LowerName}}Column() string
	{{$m.LowerName}}Value() interface{}
}

type {{$m.CapitalName}}Values []{{$m.LowerName}}ColumnValue

func (t *{{$m.LowerName}}Table) Input(
	{{ range $i, $p := $m.Properties }}{{ if $p.InsertRequired -}}
	{{ $p.LowerName }} {{$m.LowerName}}Table{{$p.CapitalName}},
	{{ end }}{{ end -}}
	optional ...{{$m.LowerName}}ColumnValue,
) {{$m.CapitalName}}Values {
	return append({{$m.CapitalName}}Values{
		{{ range $i, $p := $m.Properties }}{{ if $p.InsertRequired -}}
		{{ $p.LowerName }},
		{{ end }}{{- end -}}
	}, optional...)
}

func (vs {{$m.CapitalName}}Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.{{$m.LowerName}}Column()] = v.{{$m.LowerName}}Value()
	}
	return json.Marshal(r)
}

{{ range $i, $p := $m.Properties }}
func (t *{{$m.LowerName}}Table) New{{ $p.CapitalName }}(val {{$p.BaseType}}) {{$m.LowerName}}Table{{$p.CapitalName}} { return {{$m.LowerName}}Table{{$p.CapitalName}}(val) }
{{- end }}

{{ range $i, $p := $m.Properties }}
type {{$m.LowerName}}Table{{$p.CapitalName}} {{$p.BaseType}}
{{- end }}

{{ range $i, $p := $m.Properties }}
func ({{$m.LowerName}}Table{{$p.CapitalName}}) {{$m.LowerName}}Column() string { return "{{$p.SQLName}}" }
func (v {{$m.LowerName}}Table{{$p.CapitalName}}) {{$m.LowerName}}Value() interface{} { return ({{$p.BaseType}})(v) }
{{- end }}

type {{$m.CapitalName}}Row struct {
  {{- range $i, $p := $m.Properties}}
    {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
	{{- end}}
}

func (r *{{$m.CapitalName}}Row) Receive() []interface{} {
	return []interface{}{
    {{- range $i, $p := $m.Properties -}}
		{{if $i}}, {{end}}&r.{{$p.CapitalName}}
		{{- end -}}
	}
}

type {{$m.CapitalName}}Rows []{{$m.CapitalName}}Row

func (rs *{{$m.CapitalName}}Rows) Receive() []interface{} {
	*rs = append(*rs, {{$m.CapitalName}}Row{})
	return (*rs)[len(*rs)-1].Receive()
}

func (t *{{$m.LowerName}}Table) Select() *dsl.SelectQuery {
	return dsl.
	  Select(t.AllColumns()...).From(t)
}

func (t *{{$m.LowerName}}Table) InsertOneJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				{{range $i, $p := $m.Properties -}}
				{{if $p.Default}}dsl.Coalesce(`__iv__."{{$p.SQLName}}"`, "{{$p.Default}}"){{else}}`__iv__."{{$p.SQLName}}"`{{end}},
				{{end -}}
			).
				Fromf(`json_populate_record(null::%s, %s) AS __iv__`, {{$m.CapitalName}}, jsonExpr),
		)
}

func (t *{{$m.LowerName}}Table) InsertManyJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				{{range $i, $p := $m.Properties -}}
				{{if $p.Default}}dsl.Coalesce(`__iv__."{{$p.SQLName}}"`, "{{$p.Default}}"){{else}}`__iv__."{{$p.SQLName}}"`{{end}},
				{{end -}}
			).
				Fromf(`json_populate_recordset(null::%s, %s) AS __iv__`, {{$m.CapitalName}}, jsonExpr),
		)
}

func (t *{{$m.LowerName}}Table) UpdateJSON(jsonExpr interface{}) *dsl.UpdateQuery {
	return dsl.
		Update(t).
		Set(
			{{range $i, $p := $m.Properties -}}
			t.{{$p.CapitalName}}.Set(dsl.Coalesce(`__ch__."{{$p.SQLName}}"`, t.{{$p.CapitalName}})),
			{{end -}}
		).
		Fromf(`json_populate_record(null::%s, %s) AS __ch__`, {{$m.CapitalName}}, jsonExpr)
}

func (t *{{$m.LowerName}}Table) DeleteWhere(cond interface{}) *dsl.DeleteQuery {
	return dsl.
		DeleteFrom(t).Where(dsl.WrapExpr(cond))
}

{{- end -}}