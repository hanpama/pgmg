// Code generated by templates/merger/main.go. DO NOT EDIT.
package templates

import "encoding/base64"

// {{- define "model" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// import (
// 	"encoding/json"
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// {{ range $i, $key := .Keys }}
// type {{$key.CapitalName}} struct {
// 	{{- range $i, $e := $key.Properties}}
// 	{{$e.CapitalName}} {{$e.SelectType}} `json:"{{$e.SQLName}}"`
// 	{{- end}}
// }
// {{- end }}
// 
// {{ range $i, $v := .Properties }}
// type {{$v.CapitalName}} {{$v.BaseType}}
// {{- end}}
// 
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},{{ if eq $i 5 }}
// 		{{end}}
// 		{{- end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// type Values []attribute
// 
// func InputValues(
// 	{{ range $i, $p := .Properties -}}
// 	{{ $p.LowerName }} {{ $p.CapitalName }},
// 	{{ end -}}
// 	attrs ...attribute,
// ) Values {
// 	return append(Values{
// 		{{- range $i, $p := .Properties -}}
// 		{{ $p.LowerName }},
// 		{{- end -}}
// 	}, attrs...)
// }
// func (vs Values) ApplyTo(r *Record) {
// 	for _, v := range vs {
// 		v.ApplyTo(r)
// 	}
// }
// 
// func (vs Values) MarshalJSON() (b []byte, err error) {
// 	r := make(map[string]interface{})
// 	for _, v := range vs {
// 		r[v.Column()] = v.Value()
// 	}
// 	return json.Marshal(r)
// }
// 
// type attribute interface {
//   ApplyTo(*Record)
//   Column() string
//   Value() interface{}
// }
// 
// {{- range $i, $v := .Properties }}
// func (v {{$v.CapitalName}}) ApplyTo(r *Record)  { r.{{$v.CapitalName}} = ({{$v.SelectType}})({{ if $v.SelectNullable }}&{{end}}v) }
// func (v {{$v.CapitalName}}) Column() string     { return "{{$v.SQLName}}" }
// func (v {{$v.CapitalName}}) Value() interface{} { return ({{$v.BaseType}})(v) }
// {{- end}}
// 
// func mustMarshalJSON(v interface{}) []byte {
// 	b, err := json.Marshal(v)
// 	if err != nil {
// 		panic(err)
// 	}
// 	return b
// }
// 
// {{- end -}}
// {{- define "query" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// {{ $table := .Name }}
// {{ $columns := .Properties }}
// 
// func Insert(vss ...Values) Query {
// 	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func InsertReturning(vss ...Values) Query {
// 	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func Select(k key) Query {
// 	return k.selectSQL()
// }
// func Update(k key, args ...attribute) Query {
// 	return k.updateSQL(args...)
// }
// func Delete(k key) Query {
// 	return k.deleteSQL()
// }
// 
// const (
// 	InsertSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1) `
// 	InsertReturningSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1)
// 		RETURNING *`
// )
// 
// {{- range $i, $key := .Keys }}
// 
// func (k {{$key.CapitalName}}) selectSQL() Query {
// 	return Query{Select{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// func (k {{$key.CapitalName}}) updateSQL(args ...attribute) Query {
// 	return Query{Update{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 		string(mustMarshalJSON(Values(args))),
// 	}}
// }
// func (k {{$key.CapitalName}}) deleteSQL() Query {
// 	return Query{Delete{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// 
// const (
// 	Select{{$key.CapitalName}} = `
// 		SELECT * FROM "{{ $table }}" WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		) LIMIT 1
// 		`
// 	Update{{$key.CapitalName}} = `
// 		UPDATE "{{ $table }}"
// 		SET {{ range $i, $p := $columns }}{{ if $i}},
// 			{{end}}"{{$p.SQLName}}" = COALESCE(_ch."{{$p.SQLName}}", "{{ $table }}"."{{$p.SQLName}}")
// 		{{- end }}
// 		FROM (SELECT * FROM json_populate_record(null::"{{ $table }}", $2)) _ch
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// 	Delete{{$key.CapitalName}} = `
// 		DELETE FROM "{{ $table }}"
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// )
// 
// {{ end }}
// 
// type key interface {
// 	selectSQL() Query
// 	updateSQL(args ...attribute) Query
// 	deleteSQL() Query
// }
// 
// type Query struct {
// 	sql  string
// 	args []interface{}
// }
// 
// func (q Query) SQL() string         { return q.sql }
// func (q Query) Args() []interface{} { return q.args }
// 
// {{ end }}
// 
var content = mustDecode(
		"e3stIGRlZmluZSAibW9kZWwiIC19fQovLyBDb2RlIGdlbmVyYXRlZCBieSBnaXRodWIuY29tL2hhbnBhbWEvcGdtZy4gRE8gTk9U" +
		"IEVESVQuCnBhY2thZ2Uge3sgLk5hbWUgfX0KCmltcG9ydCAoCgkiZW5jb2RpbmcvanNvbiIKCXt7IHJhbmdlICRpLCAkZCA6PSAu" +
		"RGVwZW5kZW5jaWVzIC19fQoJInt7JGR9fSIKCXt7IGVuZCAtfX0KKQoKdHlwZSBSZWNvcmQgc3RydWN0IHsKICB7ey0gcmFuZ2Ug" +
		"JGksICRwIDo9IC5Qcm9wZXJ0aWVzfX0KICAgIHt7JHAuQ2FwaXRhbE5hbWV9fSB7eyRwLlNlbGVjdFR5cGV9fSBganNvbjoie3sk" +
		"cC5TUUxOYW1lfX0iYAoJe3stIGVuZH19Cn0KCnt7IHJhbmdlICRpLCAka2V5IDo9IC5LZXlzIH19CnR5cGUge3ska2V5LkNhcGl0" +
		"YWxOYW1lfX0gc3RydWN0IHsKCXt7LSByYW5nZSAkaSwgJGUgOj0gJGtleS5Qcm9wZXJ0aWVzfX0KCXt7JGUuQ2FwaXRhbE5hbWV9" +
		"fSB7eyRlLlNlbGVjdFR5cGV9fSBganNvbjoie3skZS5TUUxOYW1lfX0iYAoJe3stIGVuZH19Cn0Ke3stIGVuZCB9fQoKe3sgcmFu" +
		"Z2UgJGksICR2IDo9IC5Qcm9wZXJ0aWVzIH19CnR5cGUge3skdi5DYXBpdGFsTmFtZX19IHt7JHYuQmFzZVR5cGV9fQp7ey0gZW5k" +
		"fX0KCgpmdW5jIChyICpSZWNvcmQpIFJlY2VpdmUoKSBbXWludGVyZmFjZXt9IHsKCXJldHVybiBbXWludGVyZmFjZXt9ewogICAg" +
		"e3sgcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJCSZyLnt7JHAuQ2FwaXRhbE5hbWV9fSx7eyBpZiBlcSAkaSA1IH19" +
		"CgkJe3tlbmR9fQoJCXt7LSBlbmQgfX0KCX0KfQoKdHlwZSBSZWNvcmRzZXQgW11SZWNvcmQKCmZ1bmMgKHJzICpSZWNvcmRzZXQp" +
		"IFJlY2VpdmVOZXh0KCkgW11pbnRlcmZhY2V7fSB7CgkqcnMgPSBhcHBlbmQoKnJzLCBSZWNvcmR7fSkKCXJldHVybiAoKnJzKVts" +
		"ZW4oKnJzKS0xXS5SZWNlaXZlKCkKfQoKdHlwZSBWYWx1ZXMgW11hdHRyaWJ1dGUKCmZ1bmMgSW5wdXRWYWx1ZXMoCgl7eyByYW5n" +
		"ZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19Cgl7eyAkcC5Mb3dlck5hbWUgfX0ge3sgJHAuQ2FwaXRhbE5hbWUgfX0sCgl7eyBl" +
		"bmQgLX19CglhdHRycyAuLi5hdHRyaWJ1dGUsCikgVmFsdWVzIHsKCXJldHVybiBhcHBlbmQoVmFsdWVzewoJCXt7LSByYW5nZSAk" +
		"aSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJe3sgJHAuTG93ZXJOYW1lIH19LAoJCXt7LSBlbmQgLX19Cgl9LCBhdHRycy4uLikK" +
		"fQpmdW5jICh2cyBWYWx1ZXMpIEFwcGx5VG8ociAqUmVjb3JkKSB7Cglmb3IgXywgdiA6PSByYW5nZSB2cyB7CgkJdi5BcHBseVRv" +
		"KHIpCgl9Cn0KCmZ1bmMgKHZzIFZhbHVlcykgTWFyc2hhbEpTT04oKSAoYiBbXWJ5dGUsIGVyciBlcnJvcikgewoJciA6PSBtYWtl" +
		"KG1hcFtzdHJpbmddaW50ZXJmYWNle30pCglmb3IgXywgdiA6PSByYW5nZSB2cyB7CgkJclt2LkNvbHVtbigpXSA9IHYuVmFsdWUo" +
		"KQoJfQoJcmV0dXJuIGpzb24uTWFyc2hhbChyKQp9Cgp0eXBlIGF0dHJpYnV0ZSBpbnRlcmZhY2UgewogIEFwcGx5VG8oKlJlY29y" +
		"ZCkKICBDb2x1bW4oKSBzdHJpbmcKICBWYWx1ZSgpIGludGVyZmFjZXt9Cn0KCnt7LSByYW5nZSAkaSwgJHYgOj0gLlByb3BlcnRp" +
		"ZXMgfX0KZnVuYyAodiB7eyR2LkNhcGl0YWxOYW1lfX0pIEFwcGx5VG8ociAqUmVjb3JkKSAgeyByLnt7JHYuQ2FwaXRhbE5hbWV9" +
		"fSA9ICh7eyR2LlNlbGVjdFR5cGV9fSkoe3sgaWYgJHYuU2VsZWN0TnVsbGFibGUgfX0me3tlbmR9fXYpIH0KZnVuYyAodiB7eyR2" +
		"LkNhcGl0YWxOYW1lfX0pIENvbHVtbigpIHN0cmluZyAgICAgeyByZXR1cm4gInt7JHYuU1FMTmFtZX19IiB9CmZ1bmMgKHYge3sk" +
		"di5DYXBpdGFsTmFtZX19KSBWYWx1ZSgpIGludGVyZmFjZXt9IHsgcmV0dXJuICh7eyR2LkJhc2VUeXBlfX0pKHYpIH0Ke3stIGVu" +
		"ZH19CgpmdW5jIG11c3RNYXJzaGFsSlNPTih2IGludGVyZmFjZXt9KSBbXWJ5dGUgewoJYiwgZXJyIDo9IGpzb24uTWFyc2hhbCh2" +
		"KQoJaWYgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyKQoJfQoJcmV0dXJuIGIKfQoKe3stIGVuZCAtfX0Ke3stIGRlZmluZSAicXVl" +
		"cnkiIC19fQovLyBDb2RlIGdlbmVyYXRlZCBieSBnaXRodWIuY29tL2hhbnBhbWEvcGdtZy4gRE8gTk9UIEVESVQuCnBhY2thZ2Ug" +
		"e3sgLk5hbWUgfX0KCnt7ICR0YWJsZSA6PSAuTmFtZSB9fQp7eyAkY29sdW1ucyA6PSAuUHJvcGVydGllcyB9fQoKZnVuYyBJbnNl" +
		"cnQodnNzIC4uLlZhbHVlcykgUXVlcnkgewoJcmV0dXJuIFF1ZXJ5e0luc2VydFNRTCwgW11pbnRlcmZhY2V7fXtzdHJpbmcobXVz" +
		"dE1hcnNoYWxKU09OKHZzcykpfX0KfQpmdW5jIEluc2VydFJldHVybmluZyh2c3MgLi4uVmFsdWVzKSBRdWVyeSB7CglyZXR1cm4g" +
		"UXVlcnl7SW5zZXJ0UmV0dXJuaW5nU1FMLCBbXWludGVyZmFjZXt9e3N0cmluZyhtdXN0TWFyc2hhbEpTT04odnNzKSl9fQp9CmZ1" +
		"bmMgU2VsZWN0KGsga2V5KSBRdWVyeSB7CglyZXR1cm4gay5zZWxlY3RTUUwoKQp9CmZ1bmMgVXBkYXRlKGsga2V5LCBhcmdzIC4u" +
		"LmF0dHJpYnV0ZSkgUXVlcnkgewoJcmV0dXJuIGsudXBkYXRlU1FMKGFyZ3MuLi4pCn0KZnVuYyBEZWxldGUoayBrZXkpIFF1ZXJ5" +
		"IHsKCXJldHVybiBrLmRlbGV0ZVNRTCgpCn0KCmNvbnN0ICgKCUluc2VydFNRTCA9IGAKCQlJTlNFUlQgSU5UTyAie3sgJHRhYmxl" +
		"IH19IgoJCVNFTEVDVCAqIEZST00ganNvbl9wb3B1bGF0ZV9yZWNvcmRzZXQobnVsbDo6Int7ICR0YWJsZSB9fSIsICQxKSBgCglJ" +
		"bnNlcnRSZXR1cm5pbmdTUUwgPSBgCgkJSU5TRVJUIElOVE8gInt7ICR0YWJsZSB9fSIKCQlTRUxFQ1QgKiBGUk9NIGpzb25fcG9w" +
		"dWxhdGVfcmVjb3Jkc2V0KG51bGw6OiJ7eyAkdGFibGUgfX0iLCAkMSkKCQlSRVRVUk5JTkcgKmAKKQoKe3stIHJhbmdlICRpLCAk" +
		"a2V5IDo9IC5LZXlzIH19CgpmdW5jIChrIHt7JGtleS5DYXBpdGFsTmFtZX19KSBzZWxlY3RTUUwoKSBRdWVyeSB7CglyZXR1cm4g" +
		"UXVlcnl7U2VsZWN0e3ska2V5LkNhcGl0YWxOYW1lfX0sIFtdaW50ZXJmYWNle317CgkJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5" +
		"LlByb3BlcnRpZXN9fQoJCWsue3skZS5DYXBpdGFsTmFtZX19LAoJCXt7LSBlbmQgfX0KCX19Cn0KZnVuYyAoayB7eyRrZXkuQ2Fw" +
		"aXRhbE5hbWV9fSkgdXBkYXRlU1FMKGFyZ3MgLi4uYXR0cmlidXRlKSBRdWVyeSB7CglyZXR1cm4gUXVlcnl7VXBkYXRle3ska2V5" +
		"LkNhcGl0YWxOYW1lfX0sIFtdaW50ZXJmYWNle317CgkJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlByb3BlcnRpZXN9fQoJCWsu" +
		"e3skZS5DYXBpdGFsTmFtZX19LAoJCXt7LSBlbmQgfX0KCQlzdHJpbmcobXVzdE1hcnNoYWxKU09OKFZhbHVlcyhhcmdzKSkpLAoJ" +
		"fX0KfQpmdW5jIChrIHt7JGtleS5DYXBpdGFsTmFtZX19KSBkZWxldGVTUUwoKSBRdWVyeSB7CglyZXR1cm4gUXVlcnl7RGVsZXRl" +
		"e3ska2V5LkNhcGl0YWxOYW1lfX0sIFtdaW50ZXJmYWNle317CgkJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlByb3BlcnRpZXN9" +
		"fQoJCWsue3skZS5DYXBpdGFsTmFtZX19LAoJCXt7LSBlbmQgfX0KCX19Cn0KCmNvbnN0ICgKCVNlbGVjdHt7JGtleS5DYXBpdGFs" +
		"TmFtZX19ID0gYAoJCVNFTEVDVCAqIEZST00gInt7ICR0YWJsZSB9fSIgV0hFUkUgKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Q" +
		"cm9wZXJ0aWVzIC19fQoJCQkJe3sgaWYgJGkgfX0sIHt7ZW5kfX0ie3sgJHRhYmxlIH19Ii4ie3suU1FMTmFtZX19IgoJCQl7ey0g" +
		"ZW5kIC19fQoJCSkgPSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tl" +
		"bmR9fXt7IHNxbFBhcmFtICRpIH19CgkJCXt7LSBlbmQgLX19CgkJKSBMSU1JVCAxCgkJYAoJVXBkYXRle3ska2V5LkNhcGl0YWxO" +
		"YW1lfX0gPSBgCgkJVVBEQVRFICJ7eyAkdGFibGUgfX0iCgkJU0VUIHt7IHJhbmdlICRpLCAkcCA6PSAkY29sdW1ucyB9fXt7IGlm" +
		"ICRpfX0sCgkJCXt7ZW5kfX0ie3skcC5TUUxOYW1lfX0iID0gQ09BTEVTQ0UoX2NoLiJ7eyRwLlNRTE5hbWV9fSIsICJ7eyAkdGFi" +
		"bGUgfX0iLiJ7eyRwLlNRTE5hbWV9fSIpCgkJe3stIGVuZCB9fQoJCUZST00gKFNFTEVDVCAqIEZST00ganNvbl9wb3B1bGF0ZV9y" +
		"ZWNvcmQobnVsbDo6Int7ICR0YWJsZSB9fSIsICQyKSkgX2NoCgkJV0hFUkUgKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9w" +
		"ZXJ0aWVzIC19fQoJCQkJe3sgaWYgJGkgfX0sIHt7ZW5kfX0ie3sgJHRhYmxlIH19Ii4ie3suU1FMTmFtZX19IgoJCQl7ey0gZW5k" +
		"IC19fQoJCSkgPSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9" +
		"fXt7IHNxbFBhcmFtICRpIH19CgkJCXt7LSBlbmQgLX19CgkJKWAKCURlbGV0ZXt7JGtleS5DYXBpdGFsTmFtZX19ID0gYAoJCURF" +
		"TEVURSBGUk9NICJ7eyAkdGFibGUgfX0iCgkJV0hFUkUgKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJ" +
		"CQkJe3sgaWYgJGkgfX0sIHt7ZW5kfX0ie3sgJHRhYmxlIH19Ii4ie3suU1FMTmFtZX19IgoJCQl7ey0gZW5kIC19fQoJCSkgPSAo" +
		"CgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9fXt7IHNxbFBhcmFt" +
		"ICRpIH19CgkJCXt7LSBlbmQgLX19CgkJKWAKKQoKe3sgZW5kIH19Cgp0eXBlIGtleSBpbnRlcmZhY2UgewoJc2VsZWN0U1FMKCkg" +
		"UXVlcnkKCXVwZGF0ZVNRTChhcmdzIC4uLmF0dHJpYnV0ZSkgUXVlcnkKCWRlbGV0ZVNRTCgpIFF1ZXJ5Cn0KCnR5cGUgUXVlcnkg" +
		"c3RydWN0IHsKCXNxbCAgc3RyaW5nCglhcmdzIFtdaW50ZXJmYWNle30KfQoKZnVuYyAocSBRdWVyeSkgU1FMKCkgc3RyaW5nICAg" +
		"ICAgICAgeyByZXR1cm4gcS5zcWwgfQpmdW5jIChxIFF1ZXJ5KSBBcmdzKCkgW11pbnRlcmZhY2V7fSB7IHJldHVybiBxLmFyZ3Mg" +
		"fQoKe3sgZW5kIH19",
)

func mustDecode(b64 string) []byte {
  dat, err := base64.StdEncoding.DecodeString(b64)
  if err != nil {
    panic(err)
  }
  return dat
}
