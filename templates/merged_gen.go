// Code generated by templates/merger/main.go. DO NOT EDIT.
package templates

import "encoding/base64"

// {{- define "query" -}}
// // Code Generated by github.com/hanpama/pgmg
// package {{ .Name }}
// 
// {{ if .Dependencies }}
// import (
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// {{ end }}
// 
// const SQL = `
// {{ .SQL }}`
// 
// func Query(
// 	{{- range $i, $t := .GoParamTypes -}}
// 	{{ if $i }}, {{ end -}} {{ goQueryArg $i }} {{ $t }}
// 	{{- end -}}
// 	) query {
// 	return query{[]interface{} {
// 		{{- range $i, $t := .GoParamTypes -}}
// 		{{ if $i }}, {{ end -}} {{ goQueryArg $i }}
// 		{{- end -}}
// 	}}
// }
// 
// type query struct{ args []interface{} }
// 
// func (q query) SQL() string         { return SQL }
// func (q query) Args() []interface{} { return q.args }
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// {{ end }}
// 
// {{- define "table_model" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// import (
// 	"encoding/json"
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// {{ range $i, $key := .Keys }}
// type {{$key.CapitalName}} struct {
// 	{{- range $i, $e := $key.Properties}}
// 	{{$e.CapitalName}} {{$e.SelectType}} `json:"{{$e.SQLName}}"`
// 	{{- end}}
// }
// {{- end }}
// 
// {{ range $i, $v := .Properties }}
// type {{$v.CapitalName}} {{$v.BaseType}}
// {{- end}}
// 
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// type Values []attribute
// 
// func InputValues(
// 	{{ range $i, $p := .Properties }}{{ if $p.InsertRequired -}}
// 	{{ $p.LowerName }} {{ $p.CapitalName }},
// 	{{ end }}{{ end -}}
// 	attrs ...attribute,
// ) Values {
// 	return append(Values{
// 		{{ range $i, $p := .Properties }}{{ if $p.InsertRequired -}}
// 		{{ $p.LowerName }},
// 		{{ end }}{{- end -}}
// 	}, attrs...)
// }
// func (vs Values) ApplyTo(r *Record) {
// 	for _, v := range vs {
// 		v.ApplyTo(r)
// 	}
// }
// 
// func (vs Values) MarshalJSON() (b []byte, err error) {
// 	r := make(map[string]interface{})
// 	for _, v := range vs {
// 		r[v.Column()] = v.Value()
// 	}
// 	return json.Marshal(r)
// }
// 
// type attribute interface {
//   ApplyTo(*Record)
//   Column() string
//   Value() interface{}
// }
// 
// {{- range $i, $v := .Properties }}
// func (v {{$v.CapitalName}}) ApplyTo(r *Record)  { r.{{$v.CapitalName}} = ({{$v.SelectType}})({{ if $v.SelectNullable }}&{{end}}v) }
// func (v {{$v.CapitalName}}) Column() string     { return "{{$v.SQLName}}" }
// func (v {{$v.CapitalName}}) Value() interface{} { return ({{$v.BaseType}})(v) }
// {{- end}}
// 
// func mustMarshalJSON(v interface{}) []byte {
// 	b, err := json.Marshal(v)
// 	if err != nil {
// 		panic(err)
// 	}
// 	return b
// }
// 
// {{- end -}}
// {{- define "table_query" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{.Name}}
// 
// {{$schema := .Schema}}
// {{$table := .Name}}
// {{$columns := .Properties}}
// 
// func Insert(vss ...Values) Query {
// 	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func InsertReturning(vss ...Values) Query {
// 	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func Select(k key) Query {
// 	return k.selectSQL()
// }
// func Update(k key, args ...attribute) Query {
// 	return k.updateSQL(args...)
// }
// func Delete(k key) Query {
// 	return k.deleteSQL()
// }
// 
// const (
// 	InsertSQL = `
// 		INSERT INTO "{{$schema}}"."{{$table}}" (
// 			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
// 			"{{$p.SQLName}}"
// 			{{- end}}
// 		)
// 		SELECT
// 			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
// 			{{if $p.Default}}COALESCE("{{$p.SQLName}}", {{$p.Default}}){{else}}"{{$p.SQLName}}"{{end}}
// 			{{- end}}
// 		FROM json_populate_recordset(null::"{{$schema}}"."{{$table}}", $1)`
// 	InsertReturningSQL = `
// 		INSERT INTO "{{$schema}}"."{{$table}}" (
// 			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
// 			"{{$p.SQLName}}"
// 			{{- end}}
// 		)
// 		SELECT
// 			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
// 			{{if $p.Default}}COALESCE("{{$p.SQLName}}", {{$p.Default}}){{else}}"{{$p.SQLName}}"{{end}}
// 			{{- end}}
// 		FROM json_populate_recordset(null::"{{$schema}}"."{{$table}}", $1)
// 		RETURNING
// 			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
// 			"{{$p.SQLName}}"
// 			{{- end}}`
// )
// 
// {{- range $i, $key := .Keys}}
// 
// func (k {{$key.CapitalName}}) selectSQL() Query {
// 	return Query{Select{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end}}
// 	}}
// }
// func (k {{$key.CapitalName}}) updateSQL(args ...attribute) Query {
// 	return Query{Update{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end}}
// 		string(mustMarshalJSON(Values(args))),
// 	}}
// }
// func (k {{$key.CapitalName}}) deleteSQL() Query {
// 	return Query{Delete{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end}}
// 	}}
// }
// 
// const (
// 	Select{{$key.CapitalName}} = `
// 		SELECT {{range $i, $p := $columns}}{{if $i}},{{end}}
// 			"{{$p.SQLName}}"
// 		{{- end}}
// 		FROM "{{$schema}}"."{{$table}}" WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}"{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}{{sqlParam $i}}
// 			{{- end -}}
// 		) LIMIT 1`
// 	Update{{$key.CapitalName}} = `
// 		UPDATE "{{$schema}}"."{{$table}}" __ut__
// 		SET {{range $i, $p := $columns}}{{if $i}},
// 			{{end}}"{{$p.SQLName}}" = COALESCE(__ch__."{{$p.SQLName}}", __ut__."{{$p.SQLName}}")
// 		{{- end}}
// 		FROM (SELECT * FROM json_populate_record(null::"{{$schema}}"."{{$table}}", $2)) __ch__
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}__ut__."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}{{sqlParam $i}}
// 			{{- end -}}
// 		)`
// 	Delete{{$key.CapitalName}} = `
// 		DELETE FROM "{{$schema}}"."{{$table}}"
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}"{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{if $i}}, {{end}}{{sqlParam $i}}
// 			{{- end -}}
// 		)`
// )
// 
// {{end}}
// 
// type key interface {
// 	selectSQL() Query
// 	updateSQL(args ...attribute) Query
// 	deleteSQL() Query
// }
// 
// type Query struct {
// 	sql  string
// 	args []interface{}
// }
// 
// func (q Query) SQL() string         { return q.sql }
// func (q Query) Args() []interface{} { return q.args }
// 
// {{end}}
// 
var content = mustDecode(
		"e3stIGRlZmluZSAicXVlcnkiIC19fQovLyBDb2RlIEdlbmVyYXRlZCBieSBnaXRodWIuY29tL2hhbnBhbWEvcGdtZwpwYWNrYWdl" +
		"IHt7IC5OYW1lIH19Cgp7eyBpZiAuRGVwZW5kZW5jaWVzIH19CmltcG9ydCAoCgl7eyByYW5nZSAkaSwgJGQgOj0gLkRlcGVuZGVu" +
		"Y2llcyAtfX0KCSJ7eyRkfX0iCgl7eyBlbmQgLX19CikKe3sgZW5kIH19Cgpjb25zdCBTUUwgPSBgCnt7IC5TUUwgfX1gCgpmdW5j" +
		"IFF1ZXJ5KAoJe3stIHJhbmdlICRpLCAkdCA6PSAuR29QYXJhbVR5cGVzIC19fQoJe3sgaWYgJGkgfX0sIHt7IGVuZCAtfX0ge3sg" +
		"Z29RdWVyeUFyZyAkaSB9fSB7eyAkdCB9fQoJe3stIGVuZCAtfX0KCSkgcXVlcnkgewoJcmV0dXJuIHF1ZXJ5e1tdaW50ZXJmYWNl" +
		"e30gewoJCXt7LSByYW5nZSAkaSwgJHQgOj0gLkdvUGFyYW1UeXBlcyAtfX0KCQl7eyBpZiAkaSB9fSwge3sgZW5kIC19fSB7eyBn" +
		"b1F1ZXJ5QXJnICRpIH19CgkJe3stIGVuZCAtfX0KCX19Cn0KCnR5cGUgcXVlcnkgc3RydWN0eyBhcmdzIFtdaW50ZXJmYWNle30g" +
		"fQoKZnVuYyAocSBxdWVyeSkgU1FMKCkgc3RyaW5nICAgICAgICAgeyByZXR1cm4gU1FMIH0KZnVuYyAocSBxdWVyeSkgQXJncygp" +
		"IFtdaW50ZXJmYWNle30geyByZXR1cm4gcS5hcmdzIH0KCnR5cGUgUmVjb3JkIHN0cnVjdCB7CiAge3stIHJhbmdlICRpLCAkcCA6" +
		"PSAuUHJvcGVydGllc319CiAgICB7eyRwLkNhcGl0YWxOYW1lfX0ge3skcC5TZWxlY3RUeXBlfX0gYGpzb246Int7JHAuU1FMTmFt" +
		"ZX19ImAKCXt7LSBlbmR9fQp9CgpmdW5jIChyICpSZWNvcmQpIFJlY2VpdmUoKSBbXWludGVyZmFjZXt9IHsKCXJldHVybiBbXWlu" +
		"dGVyZmFjZXt9ewogICAge3sgcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJCSZyLnt7JHAuQ2FwaXRhbE5hbWV9fSwK" +
		"CQl7eyBlbmQgfX0KCX0KfQoKdHlwZSBSZWNvcmRzZXQgW11SZWNvcmQKCmZ1bmMgKHJzICpSZWNvcmRzZXQpIFJlY2VpdmVOZXh0" +
		"KCkgW11pbnRlcmZhY2V7fSB7CgkqcnMgPSBhcHBlbmQoKnJzLCBSZWNvcmR7fSkKCXJldHVybiAoKnJzKVtsZW4oKnJzKS0xXS5S" +
		"ZWNlaXZlKCkKfQoKe3sgZW5kIH19Cgp7ey0gZGVmaW5lICJ0YWJsZV9tb2RlbCIgLX19Ci8vIENvZGUgZ2VuZXJhdGVkIGJ5IGdp" +
		"dGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJVC4KcGFja2FnZSB7eyAuTmFtZSB9fQoKaW1wb3J0ICgKCSJlbmNvZGlu" +
		"Zy9qc29uIgoJe3sgcmFuZ2UgJGksICRkIDo9IC5EZXBlbmRlbmNpZXMgLX19Cgkie3skZH19IgoJe3sgZW5kIC19fQopCgp0eXBl" +
		"IFJlY29yZCBzdHJ1Y3QgewogIHt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXN9fQogICAge3skcC5DYXBpdGFsTmFtZX19" +
		"IHt7JHAuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRwLlNRTE5hbWV9fSJgCgl7ey0gZW5kfX0KfQoKe3sgcmFuZ2UgJGksICRrZXkg" +
		"Oj0gLktleXMgfX0KdHlwZSB7eyRrZXkuQ2FwaXRhbE5hbWV9fSBzdHJ1Y3QgewoJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlBy" +
		"b3BlcnRpZXN9fQoJe3skZS5DYXBpdGFsTmFtZX19IHt7JGUuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRlLlNRTE5hbWV9fSJgCgl7" +
		"ey0gZW5kfX0KfQp7ey0gZW5kIH19Cgp7eyByYW5nZSAkaSwgJHYgOj0gLlByb3BlcnRpZXMgfX0KdHlwZSB7eyR2LkNhcGl0YWxO" +
		"YW1lfX0ge3skdi5CYXNlVHlwZX19Cnt7LSBlbmR9fQoKCmZ1bmMgKHIgKlJlY29yZCkgUmVjZWl2ZSgpIFtdaW50ZXJmYWNle30g" +
		"ewoJcmV0dXJuIFtdaW50ZXJmYWNle317CiAgICB7eyByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJJnIue3skcC5D" +
		"YXBpdGFsTmFtZX19LAoJCXt7IGVuZCB9fQoJfQp9Cgp0eXBlIFJlY29yZHNldCBbXVJlY29yZAoKZnVuYyAocnMgKlJlY29yZHNl" +
		"dCkgUmVjZWl2ZU5leHQoKSBbXWludGVyZmFjZXt9IHsKCSpycyA9IGFwcGVuZCgqcnMsIFJlY29yZHt9KQoJcmV0dXJuICgqcnMp" +
		"W2xlbigqcnMpLTFdLlJlY2VpdmUoKQp9Cgp0eXBlIFZhbHVlcyBbXWF0dHJpYnV0ZQoKZnVuYyBJbnB1dFZhbHVlcygKCXt7IHJh" +
		"bmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyB9fXt7IGlmICRwLkluc2VydFJlcXVpcmVkIC19fQoJe3sgJHAuTG93ZXJOYW1lIH19" +
		"IHt7ICRwLkNhcGl0YWxOYW1lIH19LAoJe3sgZW5kIH19e3sgZW5kIC19fQoJYXR0cnMgLi4uYXR0cmlidXRlLAopIFZhbHVlcyB7" +
		"CglyZXR1cm4gYXBwZW5kKFZhbHVlc3sKCQl7eyByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgfX17eyBpZiAkcC5JbnNlcnRS" +
		"ZXF1aXJlZCAtfX0KCQl7eyAkcC5Mb3dlck5hbWUgfX0sCgkJe3sgZW5kIH19e3stIGVuZCAtfX0KCX0sIGF0dHJzLi4uKQp9CmZ1" +
		"bmMgKHZzIFZhbHVlcykgQXBwbHlUbyhyICpSZWNvcmQpIHsKCWZvciBfLCB2IDo9IHJhbmdlIHZzIHsKCQl2LkFwcGx5VG8ocikK" +
		"CX0KfQoKZnVuYyAodnMgVmFsdWVzKSBNYXJzaGFsSlNPTigpIChiIFtdYnl0ZSwgZXJyIGVycm9yKSB7CglyIDo9IG1ha2UobWFw" +
		"W3N0cmluZ11pbnRlcmZhY2V7fSkKCWZvciBfLCB2IDo9IHJhbmdlIHZzIHsKCQlyW3YuQ29sdW1uKCldID0gdi5WYWx1ZSgpCgl9" +
		"CglyZXR1cm4ganNvbi5NYXJzaGFsKHIpCn0KCnR5cGUgYXR0cmlidXRlIGludGVyZmFjZSB7CiAgQXBwbHlUbygqUmVjb3JkKQog" +
		"IENvbHVtbigpIHN0cmluZwogIFZhbHVlKCkgaW50ZXJmYWNle30KfQoKe3stIHJhbmdlICRpLCAkdiA6PSAuUHJvcGVydGllcyB9" +
		"fQpmdW5jICh2IHt7JHYuQ2FwaXRhbE5hbWV9fSkgQXBwbHlUbyhyICpSZWNvcmQpICB7IHIue3skdi5DYXBpdGFsTmFtZX19ID0g" +
		"KHt7JHYuU2VsZWN0VHlwZX19KSh7eyBpZiAkdi5TZWxlY3ROdWxsYWJsZSB9fSZ7e2VuZH19dikgfQpmdW5jICh2IHt7JHYuQ2Fw" +
		"aXRhbE5hbWV9fSkgQ29sdW1uKCkgc3RyaW5nICAgICB7IHJldHVybiAie3skdi5TUUxOYW1lfX0iIH0KZnVuYyAodiB7eyR2LkNh" +
		"cGl0YWxOYW1lfX0pIFZhbHVlKCkgaW50ZXJmYWNle30geyByZXR1cm4gKHt7JHYuQmFzZVR5cGV9fSkodikgfQp7ey0gZW5kfX0K" +
		"CmZ1bmMgbXVzdE1hcnNoYWxKU09OKHYgaW50ZXJmYWNle30pIFtdYnl0ZSB7CgliLCBlcnIgOj0ganNvbi5NYXJzaGFsKHYpCglp" +
		"ZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnIpCgl9CglyZXR1cm4gYgp9Cgp7ey0gZW5kIC19fQp7ey0gZGVmaW5lICJ0YWJsZV9x" +
		"dWVyeSIgLX19Ci8vIENvZGUgZ2VuZXJhdGVkIGJ5IGdpdGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJVC4KcGFja2Fn" +
		"ZSB7ey5OYW1lfX0KCnt7JHNjaGVtYSA6PSAuU2NoZW1hfX0Ke3skdGFibGUgOj0gLk5hbWV9fQp7eyRjb2x1bW5zIDo9IC5Qcm9w" +
		"ZXJ0aWVzfX0KCmZ1bmMgSW5zZXJ0KHZzcyAuLi5WYWx1ZXMpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtJbnNlcnRTUUwsIFtdaW50" +
		"ZXJmYWNle317c3RyaW5nKG11c3RNYXJzaGFsSlNPTih2c3MpKX19Cn0KZnVuYyBJbnNlcnRSZXR1cm5pbmcodnNzIC4uLlZhbHVl" +
		"cykgUXVlcnkgewoJcmV0dXJuIFF1ZXJ5e0luc2VydFJldHVybmluZ1NRTCwgW11pbnRlcmZhY2V7fXtzdHJpbmcobXVzdE1hcnNo" +
		"YWxKU09OKHZzcykpfX0KfQpmdW5jIFNlbGVjdChrIGtleSkgUXVlcnkgewoJcmV0dXJuIGsuc2VsZWN0U1FMKCkKfQpmdW5jIFVw" +
		"ZGF0ZShrIGtleSwgYXJncyAuLi5hdHRyaWJ1dGUpIFF1ZXJ5IHsKCXJldHVybiBrLnVwZGF0ZVNRTChhcmdzLi4uKQp9CmZ1bmMg" +
		"RGVsZXRlKGsga2V5KSBRdWVyeSB7CglyZXR1cm4gay5kZWxldGVTUUwoKQp9Cgpjb25zdCAoCglJbnNlcnRTUUwgPSBgCgkJSU5T" +
		"RVJUIElOVE8gInt7JHNjaGVtYX19Ii4ie3skdGFibGV9fSIgKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzfX17" +
		"e2lmICRpfX0se3tlbmR9fQoJCQkie3skcC5TUUxOYW1lfX0iCgkJCXt7LSBlbmR9fQoJCSkKCQlTRUxFQ1QKCQkJe3stIHJhbmdl" +
		"ICRpLCAkcCA6PSAuUHJvcGVydGllc319e3tpZiAkaX19LHt7ZW5kfX0KCQkJe3tpZiAkcC5EZWZhdWx0fX1DT0FMRVNDRSgie3sk" +
		"cC5TUUxOYW1lfX0iLCB7eyRwLkRlZmF1bHR9fSl7e2Vsc2V9fSJ7eyRwLlNRTE5hbWV9fSJ7e2VuZH19CgkJCXt7LSBlbmR9fQoJ" +
		"CUZST00ganNvbl9wb3B1bGF0ZV9yZWNvcmRzZXQobnVsbDo6Int7JHNjaGVtYX19Ii4ie3skdGFibGV9fSIsICQxKWAKCUluc2Vy" +
		"dFJldHVybmluZ1NRTCA9IGAKCQlJTlNFUlQgSU5UTyAie3skc2NoZW1hfX0iLiJ7eyR0YWJsZX19IiAoCgkJCXt7LSByYW5nZSAk" +
		"aSwgJHAgOj0gLlByb3BlcnRpZXN9fXt7aWYgJGl9fSx7e2VuZH19CgkJCSJ7eyRwLlNRTE5hbWV9fSIKCQkJe3stIGVuZH19CgkJ" +
		"KQoJCVNFTEVDVAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzfX17e2lmICRpfX0se3tlbmR9fQoJCQl7e2lmICRw" +
		"LkRlZmF1bHR9fUNPQUxFU0NFKCJ7eyRwLlNRTE5hbWV9fSIsIHt7JHAuRGVmYXVsdH19KXt7ZWxzZX19Int7JHAuU1FMTmFtZX19" +
		"Int7ZW5kfX0KCQkJe3stIGVuZH19CgkJRlJPTSBqc29uX3BvcHVsYXRlX3JlY29yZHNldChudWxsOjoie3skc2NoZW1hfX0iLiJ7" +
		"eyR0YWJsZX19IiwgJDEpCgkJUkVUVVJOSU5HCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXN9fXt7aWYgJGl9fSx7" +
		"e2VuZH19CgkJCSJ7eyRwLlNRTE5hbWV9fSIKCQkJe3stIGVuZH19YAopCgp7ey0gcmFuZ2UgJGksICRrZXkgOj0gLktleXN9fQoK" +
		"ZnVuYyAoayB7eyRrZXkuQ2FwaXRhbE5hbWV9fSkgc2VsZWN0U1FMKCkgUXVlcnkgewoJcmV0dXJuIFF1ZXJ5e1NlbGVjdHt7JGtl" +
		"eS5DYXBpdGFsTmFtZX19LCBbXWludGVyZmFjZXt9ewoJCXt7LSByYW5nZSAkaSwgJGUgOj0gJGtleS5Qcm9wZXJ0aWVzfX0KCQlr" +
		"Lnt7JGUuQ2FwaXRhbE5hbWV9fSwKCQl7ey0gZW5kfX0KCX19Cn0KZnVuYyAoayB7eyRrZXkuQ2FwaXRhbE5hbWV9fSkgdXBkYXRl" +
		"U1FMKGFyZ3MgLi4uYXR0cmlidXRlKSBRdWVyeSB7CglyZXR1cm4gUXVlcnl7VXBkYXRle3ska2V5LkNhcGl0YWxOYW1lfX0sIFtd" +
		"aW50ZXJmYWNle317CgkJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlByb3BlcnRpZXN9fQoJCWsue3skZS5DYXBpdGFsTmFtZX19" +
		"LAoJCXt7LSBlbmR9fQoJCXN0cmluZyhtdXN0TWFyc2hhbEpTT04oVmFsdWVzKGFyZ3MpKSksCgl9fQp9CmZ1bmMgKGsge3ska2V5" +
		"LkNhcGl0YWxOYW1lfX0pIGRlbGV0ZVNRTCgpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtEZWxldGV7eyRrZXkuQ2FwaXRhbE5hbWV9" +
		"fSwgW11pbnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJvcGVydGllc319CgkJay57eyRlLkNhcGl0YWxO" +
		"YW1lfX0sCgkJe3stIGVuZH19Cgl9fQp9Cgpjb25zdCAoCglTZWxlY3R7eyRrZXkuQ2FwaXRhbE5hbWV9fSA9IGAKCQlTRUxFQ1Qg" +
		"e3tyYW5nZSAkaSwgJHAgOj0gJGNvbHVtbnN9fXt7aWYgJGl9fSx7e2VuZH19CgkJCSJ7eyRwLlNRTE5hbWV9fSIKCQl7ey0gZW5k" +
		"fX0KCQlGUk9NICJ7eyRzY2hlbWF9fSIuInt7JHRhYmxlfX0iIFdIRVJFICgKCQkJe3stIHJhbmdlICRpLCAkcCA6PSAuUHJvcGVy" +
		"dGllcyAtfX0KCQkJCXt7aWYgJGl9fSwge3tlbmR9fSJ7ey5TUUxOYW1lfX0iCgkJCXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3st" +
		"IHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7aWYgJGl9fSwge3tlbmR9fXt7c3FsUGFyYW0gJGl9fQoJCQl7" +
		"ey0gZW5kIC19fQoJCSkgTElNSVQgMWAKCVVwZGF0ZXt7JGtleS5DYXBpdGFsTmFtZX19ID0gYAoJCVVQREFURSAie3skc2NoZW1h" +
		"fX0iLiJ7eyR0YWJsZX19IiBfX3V0X18KCQlTRVQge3tyYW5nZSAkaSwgJHAgOj0gJGNvbHVtbnN9fXt7aWYgJGl9fSwKCQkJe3tl" +
		"bmR9fSJ7eyRwLlNRTE5hbWV9fSIgPSBDT0FMRVNDRShfX2NoX18uInt7JHAuU1FMTmFtZX19IiwgX191dF9fLiJ7eyRwLlNRTE5h" +
		"bWV9fSIpCgkJe3stIGVuZH19CgkJRlJPTSAoU0VMRUNUICogRlJPTSBqc29uX3BvcHVsYXRlX3JlY29yZChudWxsOjoie3skc2No" +
		"ZW1hfX0iLiJ7eyR0YWJsZX19IiwgJDIpKSBfX2NoX18KCQlXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRp" +
		"ZXMgLX19CgkJCQl7e2lmICRpfX0sIHt7ZW5kfX1fX3V0X18uInt7LlNRTE5hbWV9fSIKCQkJe3stIGVuZCAtfX0KCQkpID0gKAoJ" +
		"CQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJCQkJe3tpZiAkaX19LCB7e2VuZH19e3tzcWxQYXJhbSAkaX19" +
		"CgkJCXt7LSBlbmQgLX19CgkJKWAKCURlbGV0ZXt7JGtleS5DYXBpdGFsTmFtZX19ID0gYAoJCURFTEVURSBGUk9NICJ7eyRzY2hl" +
		"bWF9fSIuInt7JHRhYmxlfX0iCgkJV0hFUkUgKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJCQkJe3tp" +
		"ZiAkaX19LCB7e2VuZH19Int7LlNRTE5hbWV9fSIKCQkJe3stIGVuZCAtfX0KCQkpID0gKAoJCQl7ey0gcmFuZ2UgJGksICRwIDo9" +
		"IC5Qcm9wZXJ0aWVzIC19fQoJCQkJe3tpZiAkaX19LCB7e2VuZH19e3tzcWxQYXJhbSAkaX19CgkJCXt7LSBlbmQgLX19CgkJKWAK" +
		"KQoKe3tlbmR9fQoKdHlwZSBrZXkgaW50ZXJmYWNlIHsKCXNlbGVjdFNRTCgpIFF1ZXJ5Cgl1cGRhdGVTUUwoYXJncyAuLi5hdHRy" +
		"aWJ1dGUpIFF1ZXJ5CglkZWxldGVTUUwoKSBRdWVyeQp9Cgp0eXBlIFF1ZXJ5IHN0cnVjdCB7CglzcWwgIHN0cmluZwoJYXJncyBb" +
		"XWludGVyZmFjZXt9Cn0KCmZ1bmMgKHEgUXVlcnkpIFNRTCgpIHN0cmluZyAgICAgICAgIHsgcmV0dXJuIHEuc3FsIH0KZnVuYyAo" +
		"cSBRdWVyeSkgQXJncygpIFtdaW50ZXJmYWNle30geyByZXR1cm4gcS5hcmdzIH0KCnt7ZW5kfX0K",
)

func mustDecode(b64 string) []byte {
  dat, err := base64.StdEncoding.DecodeString(b64)
  if err != nil {
    panic(err)
  }
  return dat
}
