// Code generated by templates/merger/main.go. DO NOT EDIT.
package templates

import "encoding/base64"

// {{- define "query" -}}
// // Code Generated by github.com/hanpama/pgmg
// package {{ .Name }}
// 
// {{ if .Dependencies }}
// import (
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// {{ end }}
// 
// const SQL = `
// {{ .SQL }}`
// 
// func Query(
// 	{{- range $i, $t := .GoParamTypes -}}
// 	{{ if $i }}, {{ end -}} {{ goQueryArg $i }} {{ $t }}
// 	{{- end -}}
// 	) query {
// 	return query{[]interface{} {
// 		{{- range $i, $t := .GoParamTypes -}}
// 		{{ if $i }}, {{ end -}} {{ goQueryArg $i }}
// 		{{- end -}}
// 	}}
// }
// 
// type query struct{ args []interface{} }
// 
// func (q query) SQL() string         { return SQL }
// func (q query) Args() []interface{} { return q.args }
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// {{ end }}
// 
// {{- define "table_model" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// import (
// 	"encoding/json"
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// {{ range $i, $key := .Keys }}
// type {{$key.CapitalName}} struct {
// 	{{- range $i, $e := $key.Properties}}
// 	{{$e.CapitalName}} {{$e.SelectType}} `json:"{{$e.SQLName}}"`
// 	{{- end}}
// }
// {{- end }}
// 
// {{ range $i, $v := .Properties }}
// type {{$v.CapitalName}} {{$v.BaseType}}
// {{- end}}
// 
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// type Values []attribute
// 
// func InputValues(
// 	{{ range $i, $p := .Properties -}}
// 	{{ $p.LowerName }} {{ $p.CapitalName }},
// 	{{ end -}}
// 	attrs ...attribute,
// ) Values {
// 	return append(Values{
// 		{{- range $i, $p := .Properties -}}
// 		{{ $p.LowerName }},
// 		{{- end -}}
// 	}, attrs...)
// }
// func (vs Values) ApplyTo(r *Record) {
// 	for _, v := range vs {
// 		v.ApplyTo(r)
// 	}
// }
// 
// func (vs Values) MarshalJSON() (b []byte, err error) {
// 	r := make(map[string]interface{})
// 	for _, v := range vs {
// 		r[v.Column()] = v.Value()
// 	}
// 	return json.Marshal(r)
// }
// 
// type attribute interface {
//   ApplyTo(*Record)
//   Column() string
//   Value() interface{}
// }
// 
// {{- range $i, $v := .Properties }}
// func (v {{$v.CapitalName}}) ApplyTo(r *Record)  { r.{{$v.CapitalName}} = ({{$v.SelectType}})({{ if $v.SelectNullable }}&{{end}}v) }
// func (v {{$v.CapitalName}}) Column() string     { return "{{$v.SQLName}}" }
// func (v {{$v.CapitalName}}) Value() interface{} { return ({{$v.BaseType}})(v) }
// {{- end}}
// 
// func mustMarshalJSON(v interface{}) []byte {
// 	b, err := json.Marshal(v)
// 	if err != nil {
// 		panic(err)
// 	}
// 	return b
// }
// 
// {{- end -}}
// {{- define "table_query" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// {{ $table := .Name }}
// {{ $columns := .Properties }}
// 
// func Insert(vss ...Values) Query {
// 	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func InsertReturning(vss ...Values) Query {
// 	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func Select(k key) Query {
// 	return k.selectSQL()
// }
// func Update(k key, args ...attribute) Query {
// 	return k.updateSQL(args...)
// }
// func Delete(k key) Query {
// 	return k.deleteSQL()
// }
// 
// const (
// 	InsertSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1) `
// 	InsertReturningSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1)
// 		RETURNING *`
// )
// 
// {{- range $i, $key := .Keys }}
// 
// func (k {{$key.CapitalName}}) selectSQL() Query {
// 	return Query{Select{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// func (k {{$key.CapitalName}}) updateSQL(args ...attribute) Query {
// 	return Query{Update{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 		string(mustMarshalJSON(Values(args))),
// 	}}
// }
// func (k {{$key.CapitalName}}) deleteSQL() Query {
// 	return Query{Delete{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// 
// const (
// 	Select{{$key.CapitalName}} = `
// 		SELECT * FROM "{{ $table }}" WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		) LIMIT 1
// 		`
// 	Update{{$key.CapitalName}} = `
// 		UPDATE "{{ $table }}"
// 		SET {{ range $i, $p := $columns }}{{ if $i}},
// 			{{end}}"{{$p.SQLName}}" = COALESCE(_ch."{{$p.SQLName}}", "{{ $table }}"."{{$p.SQLName}}")
// 		{{- end }}
// 		FROM (SELECT * FROM json_populate_record(null::"{{ $table }}", $2)) _ch
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// 	Delete{{$key.CapitalName}} = `
// 		DELETE FROM "{{ $table }}"
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// )
// 
// {{ end }}
// 
// type key interface {
// 	selectSQL() Query
// 	updateSQL(args ...attribute) Query
// 	deleteSQL() Query
// }
// 
// type Query struct {
// 	sql  string
// 	args []interface{}
// }
// 
// func (q Query) SQL() string         { return q.sql }
// func (q Query) Args() []interface{} { return q.args }
// 
// {{ end }}
// 
var content = mustDecode(
		"e3stIGRlZmluZSAicXVlcnkiIC19fQovLyBDb2RlIEdlbmVyYXRlZCBieSBnaXRodWIuY29tL2hhbnBhbWEvcGdtZwpwYWNrYWdl" +
		"IHt7IC5OYW1lIH19Cgp7eyBpZiAuRGVwZW5kZW5jaWVzIH19CmltcG9ydCAoCgl7eyByYW5nZSAkaSwgJGQgOj0gLkRlcGVuZGVu" +
		"Y2llcyAtfX0KCSJ7eyRkfX0iCgl7eyBlbmQgLX19CikKe3sgZW5kIH19Cgpjb25zdCBTUUwgPSBgCnt7IC5TUUwgfX1gCgpmdW5j" +
		"IFF1ZXJ5KAoJe3stIHJhbmdlICRpLCAkdCA6PSAuR29QYXJhbVR5cGVzIC19fQoJe3sgaWYgJGkgfX0sIHt7IGVuZCAtfX0ge3sg" +
		"Z29RdWVyeUFyZyAkaSB9fSB7eyAkdCB9fQoJe3stIGVuZCAtfX0KCSkgcXVlcnkgewoJcmV0dXJuIHF1ZXJ5e1tdaW50ZXJmYWNl" +
		"e30gewoJCXt7LSByYW5nZSAkaSwgJHQgOj0gLkdvUGFyYW1UeXBlcyAtfX0KCQl7eyBpZiAkaSB9fSwge3sgZW5kIC19fSB7eyBn" +
		"b1F1ZXJ5QXJnICRpIH19CgkJe3stIGVuZCAtfX0KCX19Cn0KCnR5cGUgcXVlcnkgc3RydWN0eyBhcmdzIFtdaW50ZXJmYWNle30g" +
		"fQoKZnVuYyAocSBxdWVyeSkgU1FMKCkgc3RyaW5nICAgICAgICAgeyByZXR1cm4gU1FMIH0KZnVuYyAocSBxdWVyeSkgQXJncygp" +
		"IFtdaW50ZXJmYWNle30geyByZXR1cm4gcS5hcmdzIH0KCnR5cGUgUmVjb3JkIHN0cnVjdCB7CiAge3stIHJhbmdlICRpLCAkcCA6" +
		"PSAuUHJvcGVydGllc319CiAgICB7eyRwLkNhcGl0YWxOYW1lfX0ge3skcC5TZWxlY3RUeXBlfX0gYGpzb246Int7JHAuU1FMTmFt" +
		"ZX19ImAKCXt7LSBlbmR9fQp9CgpmdW5jIChyICpSZWNvcmQpIFJlY2VpdmUoKSBbXWludGVyZmFjZXt9IHsKCXJldHVybiBbXWlu" +
		"dGVyZmFjZXt9ewogICAge3sgcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzIC19fQoJCSZyLnt7JHAuQ2FwaXRhbE5hbWV9fSwK" +
		"CQl7eyBlbmQgfX0KCX0KfQoKdHlwZSBSZWNvcmRzZXQgW11SZWNvcmQKCmZ1bmMgKHJzICpSZWNvcmRzZXQpIFJlY2VpdmVOZXh0" +
		"KCkgW11pbnRlcmZhY2V7fSB7CgkqcnMgPSBhcHBlbmQoKnJzLCBSZWNvcmR7fSkKCXJldHVybiAoKnJzKVtsZW4oKnJzKS0xXS5S" +
		"ZWNlaXZlKCkKfQoKe3sgZW5kIH19Cgp7ey0gZGVmaW5lICJ0YWJsZV9tb2RlbCIgLX19Ci8vIENvZGUgZ2VuZXJhdGVkIGJ5IGdp" +
		"dGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJVC4KcGFja2FnZSB7eyAuTmFtZSB9fQoKaW1wb3J0ICgKCSJlbmNvZGlu" +
		"Zy9qc29uIgoJe3sgcmFuZ2UgJGksICRkIDo9IC5EZXBlbmRlbmNpZXMgLX19Cgkie3skZH19IgoJe3sgZW5kIC19fQopCgp0eXBl" +
		"IFJlY29yZCBzdHJ1Y3QgewogIHt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXN9fQogICAge3skcC5DYXBpdGFsTmFtZX19" +
		"IHt7JHAuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRwLlNRTE5hbWV9fSJgCgl7ey0gZW5kfX0KfQoKe3sgcmFuZ2UgJGksICRrZXkg" +
		"Oj0gLktleXMgfX0KdHlwZSB7eyRrZXkuQ2FwaXRhbE5hbWV9fSBzdHJ1Y3QgewoJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlBy" +
		"b3BlcnRpZXN9fQoJe3skZS5DYXBpdGFsTmFtZX19IHt7JGUuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRlLlNRTE5hbWV9fSJgCgl7" +
		"ey0gZW5kfX0KfQp7ey0gZW5kIH19Cgp7eyByYW5nZSAkaSwgJHYgOj0gLlByb3BlcnRpZXMgfX0KdHlwZSB7eyR2LkNhcGl0YWxO" +
		"YW1lfX0ge3skdi5CYXNlVHlwZX19Cnt7LSBlbmR9fQoKCmZ1bmMgKHIgKlJlY29yZCkgUmVjZWl2ZSgpIFtdaW50ZXJmYWNle30g" +
		"ewoJcmV0dXJuIFtdaW50ZXJmYWNle317CiAgICB7eyByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJJnIue3skcC5D" +
		"YXBpdGFsTmFtZX19LAoJCXt7IGVuZCB9fQoJfQp9Cgp0eXBlIFJlY29yZHNldCBbXVJlY29yZAoKZnVuYyAocnMgKlJlY29yZHNl" +
		"dCkgUmVjZWl2ZU5leHQoKSBbXWludGVyZmFjZXt9IHsKCSpycyA9IGFwcGVuZCgqcnMsIFJlY29yZHt9KQoJcmV0dXJuICgqcnMp" +
		"W2xlbigqcnMpLTFdLlJlY2VpdmUoKQp9Cgp0eXBlIFZhbHVlcyBbXWF0dHJpYnV0ZQoKZnVuYyBJbnB1dFZhbHVlcygKCXt7IHJh" +
		"bmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCXt7ICRwLkxvd2VyTmFtZSB9fSB7eyAkcC5DYXBpdGFsTmFtZSB9fSwKCXt7" +
		"IGVuZCAtfX0KCWF0dHJzIC4uLmF0dHJpYnV0ZSwKKSBWYWx1ZXMgewoJcmV0dXJuIGFwcGVuZChWYWx1ZXN7CgkJe3stIHJhbmdl" +
		"ICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQl7eyAkcC5Mb3dlck5hbWUgfX0sCgkJe3stIGVuZCAtfX0KCX0sIGF0dHJzLi4u" +
		"KQp9CmZ1bmMgKHZzIFZhbHVlcykgQXBwbHlUbyhyICpSZWNvcmQpIHsKCWZvciBfLCB2IDo9IHJhbmdlIHZzIHsKCQl2LkFwcGx5" +
		"VG8ocikKCX0KfQoKZnVuYyAodnMgVmFsdWVzKSBNYXJzaGFsSlNPTigpIChiIFtdYnl0ZSwgZXJyIGVycm9yKSB7CglyIDo9IG1h" +
		"a2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSkKCWZvciBfLCB2IDo9IHJhbmdlIHZzIHsKCQlyW3YuQ29sdW1uKCldID0gdi5WYWx1" +
		"ZSgpCgl9CglyZXR1cm4ganNvbi5NYXJzaGFsKHIpCn0KCnR5cGUgYXR0cmlidXRlIGludGVyZmFjZSB7CiAgQXBwbHlUbygqUmVj" +
		"b3JkKQogIENvbHVtbigpIHN0cmluZwogIFZhbHVlKCkgaW50ZXJmYWNle30KfQoKe3stIHJhbmdlICRpLCAkdiA6PSAuUHJvcGVy" +
		"dGllcyB9fQpmdW5jICh2IHt7JHYuQ2FwaXRhbE5hbWV9fSkgQXBwbHlUbyhyICpSZWNvcmQpICB7IHIue3skdi5DYXBpdGFsTmFt" +
		"ZX19ID0gKHt7JHYuU2VsZWN0VHlwZX19KSh7eyBpZiAkdi5TZWxlY3ROdWxsYWJsZSB9fSZ7e2VuZH19dikgfQpmdW5jICh2IHt7" +
		"JHYuQ2FwaXRhbE5hbWV9fSkgQ29sdW1uKCkgc3RyaW5nICAgICB7IHJldHVybiAie3skdi5TUUxOYW1lfX0iIH0KZnVuYyAodiB7" +
		"eyR2LkNhcGl0YWxOYW1lfX0pIFZhbHVlKCkgaW50ZXJmYWNle30geyByZXR1cm4gKHt7JHYuQmFzZVR5cGV9fSkodikgfQp7ey0g" +
		"ZW5kfX0KCmZ1bmMgbXVzdE1hcnNoYWxKU09OKHYgaW50ZXJmYWNle30pIFtdYnl0ZSB7CgliLCBlcnIgOj0ganNvbi5NYXJzaGFs" +
		"KHYpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnIpCgl9CglyZXR1cm4gYgp9Cgp7ey0gZW5kIC19fQp7ey0gZGVmaW5lICJ0" +
		"YWJsZV9xdWVyeSIgLX19Ci8vIENvZGUgZ2VuZXJhdGVkIGJ5IGdpdGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJVC4K" +
		"cGFja2FnZSB7eyAuTmFtZSB9fQoKe3sgJHRhYmxlIDo9IC5OYW1lIH19Cnt7ICRjb2x1bW5zIDo9IC5Qcm9wZXJ0aWVzIH19Cgpm" +
		"dW5jIEluc2VydCh2c3MgLi4uVmFsdWVzKSBRdWVyeSB7CglyZXR1cm4gUXVlcnl7SW5zZXJ0U1FMLCBbXWludGVyZmFjZXt9e3N0" +
		"cmluZyhtdXN0TWFyc2hhbEpTT04odnNzKSl9fQp9CmZ1bmMgSW5zZXJ0UmV0dXJuaW5nKHZzcyAuLi5WYWx1ZXMpIFF1ZXJ5IHsK" +
		"CXJldHVybiBRdWVyeXtJbnNlcnRSZXR1cm5pbmdTUUwsIFtdaW50ZXJmYWNle317c3RyaW5nKG11c3RNYXJzaGFsSlNPTih2c3Mp" +
		"KX19Cn0KZnVuYyBTZWxlY3QoayBrZXkpIFF1ZXJ5IHsKCXJldHVybiBrLnNlbGVjdFNRTCgpCn0KZnVuYyBVcGRhdGUoayBrZXks" +
		"IGFyZ3MgLi4uYXR0cmlidXRlKSBRdWVyeSB7CglyZXR1cm4gay51cGRhdGVTUUwoYXJncy4uLikKfQpmdW5jIERlbGV0ZShrIGtl" +
		"eSkgUXVlcnkgewoJcmV0dXJuIGsuZGVsZXRlU1FMKCkKfQoKY29uc3QgKAoJSW5zZXJ0U1FMID0gYAoJCUlOU0VSVCBJTlRPICJ7" +
		"eyAkdGFibGUgfX0iCgkJU0VMRUNUICogRlJPTSBqc29uX3BvcHVsYXRlX3JlY29yZHNldChudWxsOjoie3sgJHRhYmxlIH19Iiwg" +
		"JDEpIGAKCUluc2VydFJldHVybmluZ1NRTCA9IGAKCQlJTlNFUlQgSU5UTyAie3sgJHRhYmxlIH19IgoJCVNFTEVDVCAqIEZST00g" +
		"anNvbl9wb3B1bGF0ZV9yZWNvcmRzZXQobnVsbDo6Int7ICR0YWJsZSB9fSIsICQxKQoJCVJFVFVSTklORyAqYAopCgp7ey0gcmFu" +
		"Z2UgJGksICRrZXkgOj0gLktleXMgfX0KCmZ1bmMgKGsge3ska2V5LkNhcGl0YWxOYW1lfX0pIHNlbGVjdFNRTCgpIFF1ZXJ5IHsK" +
		"CXJldHVybiBRdWVyeXtTZWxlY3R7eyRrZXkuQ2FwaXRhbE5hbWV9fSwgW11pbnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRl" +
		"IDo9ICRrZXkuUHJvcGVydGllc319CgkJay57eyRlLkNhcGl0YWxOYW1lfX0sCgkJe3stIGVuZCB9fQoJfX0KfQpmdW5jIChrIHt7" +
		"JGtleS5DYXBpdGFsTmFtZX19KSB1cGRhdGVTUUwoYXJncyAuLi5hdHRyaWJ1dGUpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtVcGRh" +
		"dGV7eyRrZXkuQ2FwaXRhbE5hbWV9fSwgW11pbnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJvcGVydGll" +
		"c319CgkJay57eyRlLkNhcGl0YWxOYW1lfX0sCgkJe3stIGVuZCB9fQoJCXN0cmluZyhtdXN0TWFyc2hhbEpTT04oVmFsdWVzKGFy" +
		"Z3MpKSksCgl9fQp9CmZ1bmMgKGsge3ska2V5LkNhcGl0YWxOYW1lfX0pIGRlbGV0ZVNRTCgpIFF1ZXJ5IHsKCXJldHVybiBRdWVy" +
		"eXtEZWxldGV7eyRrZXkuQ2FwaXRhbE5hbWV9fSwgW11pbnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJv" +
		"cGVydGllc319CgkJay57eyRlLkNhcGl0YWxOYW1lfX0sCgkJe3stIGVuZCB9fQoJfX0KfQoKY29uc3QgKAoJU2VsZWN0e3ska2V5" +
		"LkNhcGl0YWxOYW1lfX0gPSBgCgkJU0VMRUNUICogRlJPTSAie3sgJHRhYmxlIH19IiBXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwg" +
		"JHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9fSJ7eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0i" +
		"CgkJCXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3stIHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRp" +
		"IH19LCB7e2VuZH19e3sgc3FsUGFyYW0gJGkgfX0KCQkJe3stIGVuZCAtfX0KCQkpIExJTUlUIDEKCQlgCglVcGRhdGV7eyRrZXku" +
		"Q2FwaXRhbE5hbWV9fSA9IGAKCQlVUERBVEUgInt7ICR0YWJsZSB9fSIKCQlTRVQge3sgcmFuZ2UgJGksICRwIDo9ICRjb2x1bW5z" +
		"IH19e3sgaWYgJGl9fSwKCQkJe3tlbmR9fSJ7eyRwLlNRTE5hbWV9fSIgPSBDT0FMRVNDRShfY2guInt7JHAuU1FMTmFtZX19Iiwg" +
		"Int7ICR0YWJsZSB9fSIuInt7JHAuU1FMTmFtZX19IikKCQl7ey0gZW5kIH19CgkJRlJPTSAoU0VMRUNUICogRlJPTSBqc29uX3Bv" +
		"cHVsYXRlX3JlY29yZChudWxsOjoie3sgJHRhYmxlIH19IiwgJDIpKSBfY2gKCQlXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAg" +
		"Oj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9fSJ7eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0iCgkJ" +
		"CXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3stIHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRpIH19" +
		"LCB7e2VuZH19e3sgc3FsUGFyYW0gJGkgfX0KCQkJe3stIGVuZCAtfX0KCQkpYAoJRGVsZXRle3ska2V5LkNhcGl0YWxOYW1lfX0g" +
		"PSBgCgkJREVMRVRFIEZST00gInt7ICR0YWJsZSB9fSIKCQlXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRp" +
		"ZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9fSJ7eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0iCgkJCXt7LSBlbmQgLX19" +
		"CgkJKSA9ICgKCQkJe3stIHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRpIH19LCB7e2VuZH19e3sg" +
		"c3FsUGFyYW0gJGkgfX0KCQkJe3stIGVuZCAtfX0KCQkpYAopCgp7eyBlbmQgfX0KCnR5cGUga2V5IGludGVyZmFjZSB7CglzZWxl" +
		"Y3RTUUwoKSBRdWVyeQoJdXBkYXRlU1FMKGFyZ3MgLi4uYXR0cmlidXRlKSBRdWVyeQoJZGVsZXRlU1FMKCkgUXVlcnkKfQoKdHlw" +
		"ZSBRdWVyeSBzdHJ1Y3QgewoJc3FsICBzdHJpbmcKCWFyZ3MgW11pbnRlcmZhY2V7fQp9CgpmdW5jIChxIFF1ZXJ5KSBTUUwoKSBz" +
		"dHJpbmcgICAgICAgICB7IHJldHVybiBxLnNxbCB9CmZ1bmMgKHEgUXVlcnkpIEFyZ3MoKSBbXWludGVyZmFjZXt9IHsgcmV0dXJu" +
		"IHEuYXJncyB9Cgp7eyBlbmQgfX0K",
)

func mustDecode(b64 string) []byte {
  dat, err := base64.StdEncoding.DecodeString(b64)
  if err != nil {
    panic(err)
  }
  return dat
}
