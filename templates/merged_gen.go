// Code generated by templates/merger/main.go. DO NOT EDIT.
package templates

import "encoding/base64"

// {{ define "query" }}
// // Code Generated by github.com/hanpama/pgmg
// package queries
// 
// import "time"
// 
// const SQL = `
// {{ .SQL }}`
// 
// func Query(args Args) query {
// 	return query{args}
// }
// 
// type Args struct {
// 	{{- range $i, $t := .GoParamTypes }}
// 	{{ goQueryArg $i }} {{ $t }}
// 	{{- end }}
// }
// 
// type query struct{ Args }
// 
// func (q query) SQL() string         { return SQL }
// func (q query) Args() []interface{} {
// 	return []interface{} {
// 		{{- range $i, $t := .GoParamTypes -}}
// 		{{if $i}}, {{end -}}
// 		q.{{- goQueryArg $i }}
// 		{{- end -}}
// 	}
// }
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// {{ end }}
// {{- define "table_model" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// import (
// 	"encoding/json"
// 	{{ range $i, $d := .Dependencies -}}
// 	"{{$d}}"
// 	{{ end -}}
// )
// 
// type Record struct {
//   {{- range $i, $p := .Properties}}
//     {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
// 	{{- end}}
// }
// 
// {{ range $i, $key := .Keys }}
// type {{$key.CapitalName}} struct {
// 	{{- range $i, $e := $key.Properties}}
// 	{{$e.CapitalName}} {{$e.SelectType}} `json:"{{$e.SQLName}}"`
// 	{{- end}}
// }
// {{- end }}
// 
// {{ range $i, $v := .Properties }}
// type {{$v.CapitalName}} {{$v.BaseType}}
// {{- end}}
// 
// 
// func (r *Record) Receive() []interface{} {
// 	return []interface{}{
//     {{ range $i, $p := .Properties -}}
// 		&r.{{$p.CapitalName}},
// 		{{ end }}
// 	}
// }
// 
// type Recordset []Record
// 
// func (rs *Recordset) ReceiveNext() []interface{} {
// 	*rs = append(*rs, Record{})
// 	return (*rs)[len(*rs)-1].Receive()
// }
// 
// type Values []attribute
// 
// func InputValues(
// 	{{ range $i, $p := .Properties -}}
// 	{{ $p.LowerName }} {{ $p.CapitalName }},
// 	{{ end -}}
// 	attrs ...attribute,
// ) Values {
// 	return append(Values{
// 		{{- range $i, $p := .Properties -}}
// 		{{ $p.LowerName }},
// 		{{- end -}}
// 	}, attrs...)
// }
// func (vs Values) ApplyTo(r *Record) {
// 	for _, v := range vs {
// 		v.ApplyTo(r)
// 	}
// }
// 
// func (vs Values) MarshalJSON() (b []byte, err error) {
// 	r := make(map[string]interface{})
// 	for _, v := range vs {
// 		r[v.Column()] = v.Value()
// 	}
// 	return json.Marshal(r)
// }
// 
// type attribute interface {
//   ApplyTo(*Record)
//   Column() string
//   Value() interface{}
// }
// 
// {{- range $i, $v := .Properties }}
// func (v {{$v.CapitalName}}) ApplyTo(r *Record)  { r.{{$v.CapitalName}} = ({{$v.SelectType}})({{ if $v.SelectNullable }}&{{end}}v) }
// func (v {{$v.CapitalName}}) Column() string     { return "{{$v.SQLName}}" }
// func (v {{$v.CapitalName}}) Value() interface{} { return ({{$v.BaseType}})(v) }
// {{- end}}
// 
// func mustMarshalJSON(v interface{}) []byte {
// 	b, err := json.Marshal(v)
// 	if err != nil {
// 		panic(err)
// 	}
// 	return b
// }
// 
// {{- end -}}
// {{- define "table_query" -}}
// // Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
// package {{ .Name }}
// 
// {{ $table := .Name }}
// {{ $columns := .Properties }}
// 
// func Insert(vss ...Values) Query {
// 	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func InsertReturning(vss ...Values) Query {
// 	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
// }
// func Select(k key) Query {
// 	return k.selectSQL()
// }
// func Update(k key, args ...attribute) Query {
// 	return k.updateSQL(args...)
// }
// func Delete(k key) Query {
// 	return k.deleteSQL()
// }
// 
// const (
// 	InsertSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1) `
// 	InsertReturningSQL = `
// 		INSERT INTO "{{ $table }}"
// 		SELECT * FROM json_populate_recordset(null::"{{ $table }}", $1)
// 		RETURNING *`
// )
// 
// {{- range $i, $key := .Keys }}
// 
// func (k {{$key.CapitalName}}) selectSQL() Query {
// 	return Query{Select{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// func (k {{$key.CapitalName}}) updateSQL(args ...attribute) Query {
// 	return Query{Update{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 		string(mustMarshalJSON(Values(args))),
// 	}}
// }
// func (k {{$key.CapitalName}}) deleteSQL() Query {
// 	return Query{Delete{{$key.CapitalName}}, []interface{}{
// 		{{- range $i, $e := $key.Properties}}
// 		k.{{$e.CapitalName}},
// 		{{- end }}
// 	}}
// }
// 
// const (
// 	Select{{$key.CapitalName}} = `
// 		SELECT * FROM "{{ $table }}" WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		) LIMIT 1
// 		`
// 	Update{{$key.CapitalName}} = `
// 		UPDATE "{{ $table }}"
// 		SET {{ range $i, $p := $columns }}{{ if $i}},
// 			{{end}}"{{$p.SQLName}}" = COALESCE(_ch."{{$p.SQLName}}", "{{ $table }}"."{{$p.SQLName}}")
// 		{{- end }}
// 		FROM (SELECT * FROM json_populate_record(null::"{{ $table }}", $2)) _ch
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// 	Delete{{$key.CapitalName}} = `
// 		DELETE FROM "{{ $table }}"
// 		WHERE (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}"{{ $table }}"."{{.SQLName}}"
// 			{{- end -}}
// 		) = (
// 			{{- range $i, $p := .Properties -}}
// 				{{ if $i }}, {{end}}{{ sqlParam $i }}
// 			{{- end -}}
// 		)`
// )
// 
// {{ end }}
// 
// type key interface {
// 	selectSQL() Query
// 	updateSQL(args ...attribute) Query
// 	deleteSQL() Query
// }
// 
// type Query struct {
// 	sql  string
// 	args []interface{}
// }
// 
// func (q Query) SQL() string         { return q.sql }
// func (q Query) Args() []interface{} { return q.args }
// 
// {{ end }}
// 
var content = mustDecode(
		"e3sgZGVmaW5lICJxdWVyeSIgfX0KLy8gQ29kZSBHZW5lcmF0ZWQgYnkgZ2l0aHViLmNvbS9oYW5wYW1hL3BnbWcKcGFja2FnZSBx" +
		"dWVyaWVzCgppbXBvcnQgInRpbWUiCgpjb25zdCBTUUwgPSBgCnt7IC5TUUwgfX1gCgpmdW5jIFF1ZXJ5KGFyZ3MgQXJncykgcXVl" +
		"cnkgewoJcmV0dXJuIHF1ZXJ5e2FyZ3N9Cn0KCnR5cGUgQXJncyBzdHJ1Y3QgewoJe3stIHJhbmdlICRpLCAkdCA6PSAuR29QYXJh" +
		"bVR5cGVzIH19Cgl7eyBnb1F1ZXJ5QXJnICRpIH19IHt7ICR0IH19Cgl7ey0gZW5kIH19Cn0KCnR5cGUgcXVlcnkgc3RydWN0eyBB" +
		"cmdzIH0KCmZ1bmMgKHEgcXVlcnkpIFNRTCgpIHN0cmluZyAgICAgICAgIHsgcmV0dXJuIFNRTCB9CmZ1bmMgKHEgcXVlcnkpIEFy" +
		"Z3MoKSBbXWludGVyZmFjZXt9IHsKCXJldHVybiBbXWludGVyZmFjZXt9IHsKCQl7ey0gcmFuZ2UgJGksICR0IDo9IC5Hb1BhcmFt" +
		"VHlwZXMgLX19CgkJe3tpZiAkaX19LCB7e2VuZCAtfX0KCQlxLnt7LSBnb1F1ZXJ5QXJnICRpIH19CgkJe3stIGVuZCAtfX0KCX0K" +
		"fQoKdHlwZSBSZWNvcmQgc3RydWN0IHsKICB7ey0gcmFuZ2UgJGksICRwIDo9IC5Qcm9wZXJ0aWVzfX0KICAgIHt7JHAuQ2FwaXRh" +
		"bE5hbWV9fSB7eyRwLlNlbGVjdFR5cGV9fSBganNvbjoie3skcC5TUUxOYW1lfX0iYAoJe3stIGVuZH19Cn0KCmZ1bmMgKHIgKlJl" +
		"Y29yZCkgUmVjZWl2ZSgpIFtdaW50ZXJmYWNle30gewoJcmV0dXJuIFtdaW50ZXJmYWNle317CiAgICB7eyByYW5nZSAkaSwgJHAg" +
		"Oj0gLlByb3BlcnRpZXMgLX19CgkJJnIue3skcC5DYXBpdGFsTmFtZX19LAoJCXt7IGVuZCB9fQoJfQp9Cgp0eXBlIFJlY29yZHNl" +
		"dCBbXVJlY29yZAoKZnVuYyAocnMgKlJlY29yZHNldCkgUmVjZWl2ZU5leHQoKSBbXWludGVyZmFjZXt9IHsKCSpycyA9IGFwcGVu" +
		"ZCgqcnMsIFJlY29yZHt9KQoJcmV0dXJuICgqcnMpW2xlbigqcnMpLTFdLlJlY2VpdmUoKQp9Cnt7IGVuZCB9fQp7ey0gZGVmaW5l" +
		"ICJ0YWJsZV9tb2RlbCIgLX19Ci8vIENvZGUgZ2VuZXJhdGVkIGJ5IGdpdGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJ" +
		"VC4KcGFja2FnZSB7eyAuTmFtZSB9fQoKaW1wb3J0ICgKCSJlbmNvZGluZy9qc29uIgoJe3sgcmFuZ2UgJGksICRkIDo9IC5EZXBl" +
		"bmRlbmNpZXMgLX19Cgkie3skZH19IgoJe3sgZW5kIC19fQopCgp0eXBlIFJlY29yZCBzdHJ1Y3QgewogIHt7LSByYW5nZSAkaSwg" +
		"JHAgOj0gLlByb3BlcnRpZXN9fQogICAge3skcC5DYXBpdGFsTmFtZX19IHt7JHAuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRwLlNR" +
		"TE5hbWV9fSJgCgl7ey0gZW5kfX0KfQoKe3sgcmFuZ2UgJGksICRrZXkgOj0gLktleXMgfX0KdHlwZSB7eyRrZXkuQ2FwaXRhbE5h" +
		"bWV9fSBzdHJ1Y3QgewoJe3stIHJhbmdlICRpLCAkZSA6PSAka2V5LlByb3BlcnRpZXN9fQoJe3skZS5DYXBpdGFsTmFtZX19IHt7" +
		"JGUuU2VsZWN0VHlwZX19IGBqc29uOiJ7eyRlLlNRTE5hbWV9fSJgCgl7ey0gZW5kfX0KfQp7ey0gZW5kIH19Cgp7eyByYW5nZSAk" +
		"aSwgJHYgOj0gLlByb3BlcnRpZXMgfX0KdHlwZSB7eyR2LkNhcGl0YWxOYW1lfX0ge3skdi5CYXNlVHlwZX19Cnt7LSBlbmR9fQoK" +
		"CmZ1bmMgKHIgKlJlY29yZCkgUmVjZWl2ZSgpIFtdaW50ZXJmYWNle30gewoJcmV0dXJuIFtdaW50ZXJmYWNle317CiAgICB7eyBy" +
		"YW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJJnIue3skcC5DYXBpdGFsTmFtZX19LAoJCXt7IGVuZCB9fQoJfQp9Cgp0" +
		"eXBlIFJlY29yZHNldCBbXVJlY29yZAoKZnVuYyAocnMgKlJlY29yZHNldCkgUmVjZWl2ZU5leHQoKSBbXWludGVyZmFjZXt9IHsK" +
		"CSpycyA9IGFwcGVuZCgqcnMsIFJlY29yZHt9KQoJcmV0dXJuICgqcnMpW2xlbigqcnMpLTFdLlJlY2VpdmUoKQp9Cgp0eXBlIFZh" +
		"bHVlcyBbXWF0dHJpYnV0ZQoKZnVuYyBJbnB1dFZhbHVlcygKCXt7IHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCXt7" +
		"ICRwLkxvd2VyTmFtZSB9fSB7eyAkcC5DYXBpdGFsTmFtZSB9fSwKCXt7IGVuZCAtfX0KCWF0dHJzIC4uLmF0dHJpYnV0ZSwKKSBW" +
		"YWx1ZXMgewoJcmV0dXJuIGFwcGVuZChWYWx1ZXN7CgkJe3stIHJhbmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQl7eyAk" +
		"cC5Mb3dlck5hbWUgfX0sCgkJe3stIGVuZCAtfX0KCX0sIGF0dHJzLi4uKQp9CmZ1bmMgKHZzIFZhbHVlcykgQXBwbHlUbyhyICpS" +
		"ZWNvcmQpIHsKCWZvciBfLCB2IDo9IHJhbmdlIHZzIHsKCQl2LkFwcGx5VG8ocikKCX0KfQoKZnVuYyAodnMgVmFsdWVzKSBNYXJz" +
		"aGFsSlNPTigpIChiIFtdYnl0ZSwgZXJyIGVycm9yKSB7CglyIDo9IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSkKCWZvciBf" +
		"LCB2IDo9IHJhbmdlIHZzIHsKCQlyW3YuQ29sdW1uKCldID0gdi5WYWx1ZSgpCgl9CglyZXR1cm4ganNvbi5NYXJzaGFsKHIpCn0K" +
		"CnR5cGUgYXR0cmlidXRlIGludGVyZmFjZSB7CiAgQXBwbHlUbygqUmVjb3JkKQogIENvbHVtbigpIHN0cmluZwogIFZhbHVlKCkg" +
		"aW50ZXJmYWNle30KfQoKe3stIHJhbmdlICRpLCAkdiA6PSAuUHJvcGVydGllcyB9fQpmdW5jICh2IHt7JHYuQ2FwaXRhbE5hbWV9" +
		"fSkgQXBwbHlUbyhyICpSZWNvcmQpICB7IHIue3skdi5DYXBpdGFsTmFtZX19ID0gKHt7JHYuU2VsZWN0VHlwZX19KSh7eyBpZiAk" +
		"di5TZWxlY3ROdWxsYWJsZSB9fSZ7e2VuZH19dikgfQpmdW5jICh2IHt7JHYuQ2FwaXRhbE5hbWV9fSkgQ29sdW1uKCkgc3RyaW5n" +
		"ICAgICB7IHJldHVybiAie3skdi5TUUxOYW1lfX0iIH0KZnVuYyAodiB7eyR2LkNhcGl0YWxOYW1lfX0pIFZhbHVlKCkgaW50ZXJm" +
		"YWNle30geyByZXR1cm4gKHt7JHYuQmFzZVR5cGV9fSkodikgfQp7ey0gZW5kfX0KCmZ1bmMgbXVzdE1hcnNoYWxKU09OKHYgaW50" +
		"ZXJmYWNle30pIFtdYnl0ZSB7CgliLCBlcnIgOj0ganNvbi5NYXJzaGFsKHYpCglpZiBlcnIgIT0gbmlsIHsKCQlwYW5pYyhlcnIp" +
		"Cgl9CglyZXR1cm4gYgp9Cgp7ey0gZW5kIC19fQp7ey0gZGVmaW5lICJ0YWJsZV9xdWVyeSIgLX19Ci8vIENvZGUgZ2VuZXJhdGVk" +
		"IGJ5IGdpdGh1Yi5jb20vaGFucGFtYS9wZ21nLiBETyBOT1QgRURJVC4KcGFja2FnZSB7eyAuTmFtZSB9fQoKe3sgJHRhYmxlIDo9" +
		"IC5OYW1lIH19Cnt7ICRjb2x1bW5zIDo9IC5Qcm9wZXJ0aWVzIH19CgpmdW5jIEluc2VydCh2c3MgLi4uVmFsdWVzKSBRdWVyeSB7" +
		"CglyZXR1cm4gUXVlcnl7SW5zZXJ0U1FMLCBbXWludGVyZmFjZXt9e3N0cmluZyhtdXN0TWFyc2hhbEpTT04odnNzKSl9fQp9CmZ1" +
		"bmMgSW5zZXJ0UmV0dXJuaW5nKHZzcyAuLi5WYWx1ZXMpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtJbnNlcnRSZXR1cm5pbmdTUUws" +
		"IFtdaW50ZXJmYWNle317c3RyaW5nKG11c3RNYXJzaGFsSlNPTih2c3MpKX19Cn0KZnVuYyBTZWxlY3QoayBrZXkpIFF1ZXJ5IHsK" +
		"CXJldHVybiBrLnNlbGVjdFNRTCgpCn0KZnVuYyBVcGRhdGUoayBrZXksIGFyZ3MgLi4uYXR0cmlidXRlKSBRdWVyeSB7CglyZXR1" +
		"cm4gay51cGRhdGVTUUwoYXJncy4uLikKfQpmdW5jIERlbGV0ZShrIGtleSkgUXVlcnkgewoJcmV0dXJuIGsuZGVsZXRlU1FMKCkK" +
		"fQoKY29uc3QgKAoJSW5zZXJ0U1FMID0gYAoJCUlOU0VSVCBJTlRPICJ7eyAkdGFibGUgfX0iCgkJU0VMRUNUICogRlJPTSBqc29u" +
		"X3BvcHVsYXRlX3JlY29yZHNldChudWxsOjoie3sgJHRhYmxlIH19IiwgJDEpIGAKCUluc2VydFJldHVybmluZ1NRTCA9IGAKCQlJ" +
		"TlNFUlQgSU5UTyAie3sgJHRhYmxlIH19IgoJCVNFTEVDVCAqIEZST00ganNvbl9wb3B1bGF0ZV9yZWNvcmRzZXQobnVsbDo6Int7" +
		"ICR0YWJsZSB9fSIsICQxKQoJCVJFVFVSTklORyAqYAopCgp7ey0gcmFuZ2UgJGksICRrZXkgOj0gLktleXMgfX0KCmZ1bmMgKGsg" +
		"e3ska2V5LkNhcGl0YWxOYW1lfX0pIHNlbGVjdFNRTCgpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtTZWxlY3R7eyRrZXkuQ2FwaXRh" +
		"bE5hbWV9fSwgW11pbnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJvcGVydGllc319CgkJay57eyRlLkNh" +
		"cGl0YWxOYW1lfX0sCgkJe3stIGVuZCB9fQoJfX0KfQpmdW5jIChrIHt7JGtleS5DYXBpdGFsTmFtZX19KSB1cGRhdGVTUUwoYXJn" +
		"cyAuLi5hdHRyaWJ1dGUpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtVcGRhdGV7eyRrZXkuQ2FwaXRhbE5hbWV9fSwgW11pbnRlcmZh" +
		"Y2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJvcGVydGllc319CgkJay57eyRlLkNhcGl0YWxOYW1lfX0sCgkJe3st" +
		"IGVuZCB9fQoJCXN0cmluZyhtdXN0TWFyc2hhbEpTT04oVmFsdWVzKGFyZ3MpKSksCgl9fQp9CmZ1bmMgKGsge3ska2V5LkNhcGl0" +
		"YWxOYW1lfX0pIGRlbGV0ZVNRTCgpIFF1ZXJ5IHsKCXJldHVybiBRdWVyeXtEZWxldGV7eyRrZXkuQ2FwaXRhbE5hbWV9fSwgW11p" +
		"bnRlcmZhY2V7fXsKCQl7ey0gcmFuZ2UgJGksICRlIDo9ICRrZXkuUHJvcGVydGllc319CgkJay57eyRlLkNhcGl0YWxOYW1lfX0s" +
		"CgkJe3stIGVuZCB9fQoJfX0KfQoKY29uc3QgKAoJU2VsZWN0e3ska2V5LkNhcGl0YWxOYW1lfX0gPSBgCgkJU0VMRUNUICogRlJP" +
		"TSAie3sgJHRhYmxlIH19IiBXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAk" +
		"aSB9fSwge3tlbmR9fSJ7eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0iCgkJCXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3stIHJh" +
		"bmdlICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRpIH19LCB7e2VuZH19e3sgc3FsUGFyYW0gJGkgfX0KCQkJ" +
		"e3stIGVuZCAtfX0KCQkpIExJTUlUIDEKCQlgCglVcGRhdGV7eyRrZXkuQ2FwaXRhbE5hbWV9fSA9IGAKCQlVUERBVEUgInt7ICR0" +
		"YWJsZSB9fSIKCQlTRVQge3sgcmFuZ2UgJGksICRwIDo9ICRjb2x1bW5zIH19e3sgaWYgJGl9fSwKCQkJe3tlbmR9fSJ7eyRwLlNR" +
		"TE5hbWV9fSIgPSBDT0FMRVNDRShfY2guInt7JHAuU1FMTmFtZX19IiwgInt7ICR0YWJsZSB9fSIuInt7JHAuU1FMTmFtZX19IikK" +
		"CQl7ey0gZW5kIH19CgkJRlJPTSAoU0VMRUNUICogRlJPTSBqc29uX3BvcHVsYXRlX3JlY29yZChudWxsOjoie3sgJHRhYmxlIH19" +
		"IiwgJDIpKSBfY2gKCQlXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9" +
		"fSwge3tlbmR9fSJ7eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0iCgkJCXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3stIHJhbmdl" +
		"ICRpLCAkcCA6PSAuUHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRpIH19LCB7e2VuZH19e3sgc3FsUGFyYW0gJGkgfX0KCQkJe3st" +
		"IGVuZCAtfX0KCQkpYAoJRGVsZXRle3ska2V5LkNhcGl0YWxOYW1lfX0gPSBgCgkJREVMRVRFIEZST00gInt7ICR0YWJsZSB9fSIK" +
		"CQlXSEVSRSAoCgkJCXt7LSByYW5nZSAkaSwgJHAgOj0gLlByb3BlcnRpZXMgLX19CgkJCQl7eyBpZiAkaSB9fSwge3tlbmR9fSJ7" +
		"eyAkdGFibGUgfX0iLiJ7ey5TUUxOYW1lfX0iCgkJCXt7LSBlbmQgLX19CgkJKSA9ICgKCQkJe3stIHJhbmdlICRpLCAkcCA6PSAu" +
		"UHJvcGVydGllcyAtfX0KCQkJCXt7IGlmICRpIH19LCB7e2VuZH19e3sgc3FsUGFyYW0gJGkgfX0KCQkJe3stIGVuZCAtfX0KCQkp" +
		"YAopCgp7eyBlbmQgfX0KCnR5cGUga2V5IGludGVyZmFjZSB7CglzZWxlY3RTUUwoKSBRdWVyeQoJdXBkYXRlU1FMKGFyZ3MgLi4u" +
		"YXR0cmlidXRlKSBRdWVyeQoJZGVsZXRlU1FMKCkgUXVlcnkKfQoKdHlwZSBRdWVyeSBzdHJ1Y3QgewoJc3FsICBzdHJpbmcKCWFy" +
		"Z3MgW11pbnRlcmZhY2V7fQp9CgpmdW5jIChxIFF1ZXJ5KSBTUUwoKSBzdHJpbmcgICAgICAgICB7IHJldHVybiBxLnNxbCB9CmZ1" +
		"bmMgKHEgUXVlcnkpIEFyZ3MoKSBbXWludGVyZmFjZXt9IHsgcmV0dXJuIHEuYXJncyB9Cgp7eyBlbmQgfX0K",
)

func mustDecode(b64 string) []byte {
  dat, err := base64.StdEncoding.DecodeString(b64)
  if err != nil {
    panic(err)
  }
  return dat
}
