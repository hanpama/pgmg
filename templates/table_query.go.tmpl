{{- define "table_query" -}}
// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package {{.Name}}

{{$schema := .Schema}}
{{$table := .Name}}
{{$columns := .Properties}}

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "{{$schema}}"."{{$table}}" (
			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
			"{{$p.SQLName}}"
			{{- end}}
		)
		SELECT
			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
			{{if $p.Default}}COALESCE("{{$p.SQLName}}", {{$p.Default}}){{else}}"{{$p.SQLName}}"{{end}}
			{{- end}}
		FROM json_populate_recordset(null::"{{$schema}}"."{{$table}}", $1)`
	InsertReturningSQL = `
		INSERT INTO "{{$schema}}"."{{$table}}" (
			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
			"{{$p.SQLName}}"
			{{- end}}
		)
		SELECT
			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
			{{if $p.Default}}COALESCE("{{$p.SQLName}}", {{$p.Default}}){{else}}"{{$p.SQLName}}"{{end}}
			{{- end}}
		FROM json_populate_recordset(null::"{{$schema}}"."{{$table}}", $1)
		RETURNING
			{{- range $i, $p := .Properties}}{{if $i}},{{end}}
			"{{$p.SQLName}}"
			{{- end}}`
)

{{- range $i, $key := .Keys}}

func (k {{$key.CapitalName}}) selectSQL() Query {
	return Query{Select{{$key.CapitalName}}, []interface{}{
		{{- range $i, $e := $key.Properties}}
		k.{{$e.CapitalName}},
		{{- end}}
	}}
}
func (k {{$key.CapitalName}}) updateSQL(args ...attribute) Query {
	return Query{Update{{$key.CapitalName}}, []interface{}{
		{{- range $i, $e := $key.Properties}}
		k.{{$e.CapitalName}},
		{{- end}}
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k {{$key.CapitalName}}) deleteSQL() Query {
	return Query{Delete{{$key.CapitalName}}, []interface{}{
		{{- range $i, $e := $key.Properties}}
		k.{{$e.CapitalName}},
		{{- end}}
	}}
}

const (
	Select{{$key.CapitalName}} = `
		SELECT {{range $i, $p := $columns}}{{if $i}},{{end}}
			"{{$p.SQLName}}"
		{{- end}}
		FROM "{{$schema}}"."{{$table}}" WHERE (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}"{{.SQLName}}"
			{{- end -}}
		) = (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}{{sqlParam $i}}
			{{- end -}}
		) LIMIT 1`
	Update{{$key.CapitalName}} = `
		UPDATE "{{$schema}}"."{{$table}}" __ut__
		SET {{range $i, $p := $columns}}{{if $i}},
			{{end}}"{{$p.SQLName}}" = COALESCE(__ch__."{{$p.SQLName}}", __ut__."{{$p.SQLName}}")
		{{- end}}
		FROM (SELECT * FROM json_populate_record(null::"{{$schema}}"."{{$table}}", $2)) __ch__
		WHERE (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}__ut__."{{.SQLName}}"
			{{- end -}}
		) = (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}{{sqlParam $i}}
			{{- end -}}
		)`
	Delete{{$key.CapitalName}} = `
		DELETE FROM "{{$schema}}"."{{$table}}"
		WHERE (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}"{{.SQLName}}"
			{{- end -}}
		) = (
			{{- range $i, $p := .Properties -}}
				{{if $i}}, {{end}}{{sqlParam $i}}
			{{- end -}}
		)`
)

{{end}}

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }

{{end}}