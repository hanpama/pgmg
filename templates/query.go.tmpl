{{- define "query" -}}
// Code Generated by github.com/hanpama/pgmg
package {{ .Name }}

{{ if .Dependencies }}
import (
	{{ range $i, $d := .Dependencies -}}
	"{{$d}}"
	{{ end -}}
)
{{ end }}

const SQL = `
{{ .SQL }}`

func Query(
	{{- range $i, $t := .GoParamTypes -}}
	{{ if $i }}, {{ end -}} {{ goQueryArg $i }} {{ $t }}
	{{- end -}}
	) query {
	return query{[]interface{} {
		{{- range $i, $t := .GoParamTypes -}}
		{{ if $i }}, {{ end -}} {{ goQueryArg $i }}
		{{- end -}}
	}}
}

type query struct{ args []interface{} }

func (q query) SQL() string         { return SQL }
func (q query) Args() []interface{} { return q.args }

type Record struct {
  {{- range $i, $p := .Properties}}
    {{$p.CapitalName}} {{$p.SelectType}} `json:"{{$p.SQLName}}"`
	{{- end}}
}

func (r *Record) Receive() []interface{} {
	return []interface{}{
    {{ range $i, $p := .Properties -}}
		&r.{{$p.CapitalName}},
		{{ end }}
	}
}

type Recordset []Record

func (rs *Recordset) ReceiveNext() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

{{ end }}
