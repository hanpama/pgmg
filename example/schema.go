// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package example

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
)

// Product represents a row for table "product"
type Product struct {
	ID      *int32     `json:"id"`
	Price   float64    `json:"price"`
	Stocked time.Time  `json:"stocked"`
	Sold    *time.Time `json:"sold"`
}

// Semester represents a row for table "semester"
type Semester struct {
	ID     *int32 `json:"id"`
	Year   int32  `json:"year"`
	Season string `json:"season"`
}

// NewProductRepository creates a new ProductRepository
func NewProductRepository(db PGMGDatabase) *ProductRepository {
	return &ProductRepository{db}
}

// ProductRepository gets, saves and deletes rows of table "product"
type ProductRepository struct {
	db PGMGDatabase
}

// GetByProductPkey gets matching rows for given ProductPkey keys from table "product"
func (rep *ProductRepository) GetByProductPkey(ctx context.Context, keys ...ProductPkey) (rows []*Product, err error) {
	return GetByProductPkey(ctx, rep.db, keys...)
}

// SaveByProductPkey upserts the given rows for table "product" checking uniqueness by contstraint "product_pkey"
func (rep *ProductRepository) SaveByProductPkey(ctx context.Context, rows ...*Product) error {
	return SaveByProductPkey(ctx, rep.db, rows...)
}

// SaveAndReturnByProductPkey upserts the given rows for table "product" checking uniqueness by contstraint "product_pkey"
// It returns the new values and scan them into given row references.
func (rep *ProductRepository) SaveAndReturnByProductPkey(ctx context.Context, rows ...*Product) ([]*Product, error) {
	return SaveAndReturnByProductPkey(ctx, rep.db, rows...)
}

// DeleteByProductPkey deletes matching rows by ProductPkey keys from table "product"
func (rep *ProductRepository) DeleteByProductPkey(ctx context.Context, keys ...ProductPkey) (int64, error) {
	return DeleteByProductPkey(ctx, rep.db, keys...)
}

// ProductCondition is used for quering table "product"
type ProductCondition struct {
	ID      *int32     `json:"id"`
	Price   *float64   `json:"price"`
	Stocked *time.Time `json:"stocked"`
	Sold    *time.Time `json:"sold"`
}

// FindProductRows find the rows matching the condition from table "product"
func (rep *ProductRepository) FindProductRows(ctx context.Context, cond ProductCondition) ([]*Product, error) {
	return FindProductRows(ctx, rep.db, cond)
}

// DeleteProductRows delete the rows matching the condition from table "product"
func (rep *ProductRepository) DeleteProductRows(ctx context.Context, cond ProductCondition) (afftected int64, err error) {
	return DeleteProductRows(ctx, rep.db, cond)
}

// CountProductRows counts the number of rows matching the condition from table "product"
func (rep *ProductRepository) CountProductRows(ctx context.Context, cond ProductCondition) (int, error) {
	return CountProductRows(ctx, rep.db, cond)
}

// NewSemesterRepository creates a new SemesterRepository
func NewSemesterRepository(db PGMGDatabase) *SemesterRepository {
	return &SemesterRepository{db}
}

// SemesterRepository gets, saves and deletes rows of table "semester"
type SemesterRepository struct {
	db PGMGDatabase
}

// GetBySemesterPkey gets matching rows for given SemesterPkey keys from table "semester"
func (rep *SemesterRepository) GetBySemesterPkey(ctx context.Context, keys ...SemesterPkey) (rows []*Semester, err error) {
	return GetBySemesterPkey(ctx, rep.db, keys...)
}

// SaveBySemesterPkey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_pkey"
func (rep *SemesterRepository) SaveBySemesterPkey(ctx context.Context, rows ...*Semester) error {
	return SaveBySemesterPkey(ctx, rep.db, rows...)
}

// SaveAndReturnBySemesterPkey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_pkey"
// It returns the new values and scan them into given row references.
func (rep *SemesterRepository) SaveAndReturnBySemesterPkey(ctx context.Context, rows ...*Semester) ([]*Semester, error) {
	return SaveAndReturnBySemesterPkey(ctx, rep.db, rows...)
}

// DeleteBySemesterPkey deletes matching rows by SemesterPkey keys from table "semester"
func (rep *SemesterRepository) DeleteBySemesterPkey(ctx context.Context, keys ...SemesterPkey) (int64, error) {
	return DeleteBySemesterPkey(ctx, rep.db, keys...)
}

// GetBySemesterYearSeasonKey gets matching rows for given SemesterYearSeasonKey keys from table "semester"
func (rep *SemesterRepository) GetBySemesterYearSeasonKey(ctx context.Context, keys ...SemesterYearSeasonKey) (rows []*Semester, err error) {
	return GetBySemesterYearSeasonKey(ctx, rep.db, keys...)
}

// SaveBySemesterYearSeasonKey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_year_season_key"
func (rep *SemesterRepository) SaveBySemesterYearSeasonKey(ctx context.Context, rows ...*Semester) error {
	return SaveBySemesterYearSeasonKey(ctx, rep.db, rows...)
}

// SaveAndReturnBySemesterYearSeasonKey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_year_season_key"
// It returns the new values and scan them into given row references.
func (rep *SemesterRepository) SaveAndReturnBySemesterYearSeasonKey(ctx context.Context, rows ...*Semester) ([]*Semester, error) {
	return SaveAndReturnBySemesterYearSeasonKey(ctx, rep.db, rows...)
}

// DeleteBySemesterYearSeasonKey deletes matching rows by SemesterYearSeasonKey keys from table "semester"
func (rep *SemesterRepository) DeleteBySemesterYearSeasonKey(ctx context.Context, keys ...SemesterYearSeasonKey) (int64, error) {
	return DeleteBySemesterYearSeasonKey(ctx, rep.db, keys...)
}

// SemesterCondition is used for quering table "semester"
type SemesterCondition struct {
	ID     *int32  `json:"id"`
	Year   *int32  `json:"year"`
	Season *string `json:"season"`
}

// FindSemesterRows find the rows matching the condition from table "semester"
func (rep *SemesterRepository) FindSemesterRows(ctx context.Context, cond SemesterCondition) ([]*Semester, error) {
	return FindSemesterRows(ctx, rep.db, cond)
}

// DeleteSemesterRows delete the rows matching the condition from table "semester"
func (rep *SemesterRepository) DeleteSemesterRows(ctx context.Context, cond SemesterCondition) (afftected int64, err error) {
	return DeleteSemesterRows(ctx, rep.db, cond)
}

// CountSemesterRows counts the number of rows matching the condition from table "semester"
func (rep *SemesterRepository) CountSemesterRows(ctx context.Context, cond SemesterCondition) (int, error) {
	return CountSemesterRows(ctx, rep.db, cond)
}

// ProductID represents column "id" of table "product"
type ProductID *int32

// ProductPrice represents column "price" of table "product"
type ProductPrice float64

// ProductStocked represents column "stocked" of table "product"
type ProductStocked time.Time

// ProductSold represents column "sold" of table "product"
type ProductSold *time.Time

// NewProduct creates a new row for table "product" with all column values
func NewProduct(
	id ProductID,
	price ProductPrice,
	stocked ProductStocked,
	sold ProductSold,
) *Product {
	return &Product{
		(*int32)(id),
		(float64)(price),
		(time.Time)(stocked),
		(*time.Time)(sold),
	}
}

func (r *Product) ReceiveRow() []interface{} {
	return []interface{}{&r.ID, &r.Price, &r.Stocked, &r.Sold}
}

// SemesterID represents column "id" of table "semester"
type SemesterID *int32

// SemesterYear represents column "year" of table "semester"
type SemesterYear int32

// SemesterSeason represents column "season" of table "semester"
type SemesterSeason string

// NewSemester creates a new row for table "semester" with all column values
func NewSemester(
	id SemesterID,
	year SemesterYear,
	season SemesterSeason,
) *Semester {
	return &Semester{
		(*int32)(id),
		(int32)(year),
		(string)(season),
	}
}

func (r *Semester) ReceiveRow() []interface{} {
	return []interface{}{&r.ID, &r.Year, &r.Season}
}

// ProductPkey represents key defined by UNIQUE constraint "product_pkey" for table "product"
type ProductPkey struct {
	ID int32 `json:"id"`
}

func (r *Product) ProductPkey() ProductPkey {
	k := ProductPkey{}
	if r.ID != nil {
		k.ID = *r.ID
	}
	return k
}

var SQLGetByProductPkey = `
	WITH __key AS (
		SELECT ROW_NUMBER() over () __keyindex,
			id
		FROM json_populate_recordset(null::"wise"."product", $1)
	)
	SELECT "id", "price", "stocked", "sold"
	FROM __key JOIN "wise"."product" AS __table USING ("id")
	ORDER BY __keyindex
`

// GetByProductPkey gets matching rows for given ProductPkey keys from table "product"
func GetByProductPkey(ctx context.Context, db PGMGDatabase, keys ...ProductPkey) (rows []*Product, err error) {
	var b []byte
	if b, err = json.Marshal(keys); err != nil {
		return nil, fmt.Errorf("%w(GetByProductPkey, %w)", ErrPGMG, err)
	}
	rows = make([]*Product, len(keys))
	if _, err = db.QueryScan(ctx, func(i int) []interface{} {
		rows[i] = &Product{}
		return rows[i].ReceiveRow()
	}, SQLGetByProductPkey, b); err != nil {
		return nil, fmt.Errorf("%w(GetByProductPkey, %w)", ErrPGMG, err)
	}
	for i := 0; i < len(keys); i++ {
		if rows[i] == nil {
			break
		} else if rows[i].ProductPkey() != keys[i] {
			copy(rows[i+1:], rows[i:])
			rows[i] = nil
		}
	}
	return rows, nil
}

var SQLSaveByProductPkey = `
	WITH __values AS (
		SELECT
			COALESCE(__input."id", nextval('wise.product_id_seq'::regclass)) "id",
			__input."price",
			__input."stocked",
			__input."sold"
		FROM json_populate_recordset(null::"wise"."product", $1) __input
	)
	INSERT INTO "wise"."product" AS _t ("id", "price", "stocked", "sold")
	SELECT "id", "price", "stocked", "sold" FROM __values
	ON CONFLICT ("id") DO UPDATE
		SET ("id", "price", "stocked", "sold") = (
			SELECT "id", "price", "stocked", "sold" FROM __values
			WHERE __values."id" = _t."id"
		)
`

// SaveByProductPkey upserts the given rows for table "product" checking uniqueness by contstraint "product_pkey"
func SaveByProductPkey(ctx context.Context, db PGMGDatabase, rows ...*Product) (err error) {
	if err = execJSONSave(ctx, db, SQLSaveByProductPkey, rows, len(rows)); err != nil {
		return fmt.Errorf("%w(SaveByProductPkey, %w)", ErrPGMG, err)
	}
	return nil
}

var SQLSaveAndReturnByProductPkey = SQLSaveByProductPkey + " RETURNING id, price, stocked, sold"

// SaveAndReturnByProductPkey upserts the given rows for table "product" checking uniqueness by contstraint "product_pkey"
// It returns the new values and scan them into given row references.
func SaveAndReturnByProductPkey(ctx context.Context, db PGMGDatabase, rows ...*Product) ([]*Product, error) {
	err := execJSONSaveAndReturn(ctx, db, func(i int) []interface{} { return rows[i].ReceiveRow() }, SQLSaveAndReturnByProductPkey, rows, len(rows))
	if err != nil {
		return rows, fmt.Errorf("%w(SaveAndReturnByProductPkey, %w)", ErrPGMG, err)
	}
	return rows, nil
}

var SQLDeleteByProductPkey = `
WITH __key AS (SELECT id FROM json_populate_recordset(null::"wise"."product", $1))
DELETE FROM "wise"."product" AS __table
	USING __key
	WHERE (__key."id" = __table."id")
	`

// DeleteByProductPkey deletes matching rows by ProductPkey keys from table "product"
func DeleteByProductPkey(ctx context.Context, db PGMGDatabase, keys ...ProductPkey) (affected int64, err error) {
	b, err := json.Marshal(keys)
	if err != nil {
		return affected, fmt.Errorf("%w(DeleteByProductPkey, %w)", ErrPGMG, err)
	}
	if affected, err = db.Exec(ctx, SQLDeleteByProductPkey, b); err != nil {
		return affected, fmt.Errorf("%w(DeleteByProductPkey, %w)", ErrPGMG, err)
	}
	return affected, nil
}

// SemesterPkey represents key defined by UNIQUE constraint "semester_pkey" for table "semester"
type SemesterPkey struct {
	ID int32 `json:"id"`
}

func (r *Semester) SemesterPkey() SemesterPkey {
	k := SemesterPkey{}
	if r.ID != nil {
		k.ID = *r.ID
	}
	return k
}

var SQLGetBySemesterPkey = `
	WITH __key AS (
		SELECT ROW_NUMBER() over () __keyindex,
			id
		FROM json_populate_recordset(null::"wise"."semester", $1)
	)
	SELECT "id", "year", "season"
	FROM __key JOIN "wise"."semester" AS __table USING ("id")
	ORDER BY __keyindex
`

// GetBySemesterPkey gets matching rows for given SemesterPkey keys from table "semester"
func GetBySemesterPkey(ctx context.Context, db PGMGDatabase, keys ...SemesterPkey) (rows []*Semester, err error) {
	var b []byte
	if b, err = json.Marshal(keys); err != nil {
		return nil, fmt.Errorf("%w(GetBySemesterPkey, %w)", ErrPGMG, err)
	}
	rows = make([]*Semester, len(keys))
	if _, err = db.QueryScan(ctx, func(i int) []interface{} {
		rows[i] = &Semester{}
		return rows[i].ReceiveRow()
	}, SQLGetBySemesterPkey, b); err != nil {
		return nil, fmt.Errorf("%w(GetBySemesterPkey, %w)", ErrPGMG, err)
	}
	for i := 0; i < len(keys); i++ {
		if rows[i] == nil {
			break
		} else if rows[i].SemesterPkey() != keys[i] {
			copy(rows[i+1:], rows[i:])
			rows[i] = nil
		}
	}
	return rows, nil
}

var SQLSaveBySemesterPkey = `
	WITH __values AS (
		SELECT
			COALESCE(__input."id", nextval('wise.semester_id_seq'::regclass)) "id",
			__input."year",
			__input."season"
		FROM json_populate_recordset(null::"wise"."semester", $1) __input
	)
	INSERT INTO "wise"."semester" AS _t ("id", "year", "season")
	SELECT "id", "year", "season" FROM __values
	ON CONFLICT ("id") DO UPDATE
		SET ("id", "year", "season") = (
			SELECT "id", "year", "season" FROM __values
			WHERE __values."id" = _t."id"
		)
`

// SaveBySemesterPkey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_pkey"
func SaveBySemesterPkey(ctx context.Context, db PGMGDatabase, rows ...*Semester) (err error) {
	if err = execJSONSave(ctx, db, SQLSaveBySemesterPkey, rows, len(rows)); err != nil {
		return fmt.Errorf("%w(SaveBySemesterPkey, %w)", ErrPGMG, err)
	}
	return nil
}

var SQLSaveAndReturnBySemesterPkey = SQLSaveBySemesterPkey + " RETURNING id, year, season"

// SaveAndReturnBySemesterPkey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_pkey"
// It returns the new values and scan them into given row references.
func SaveAndReturnBySemesterPkey(ctx context.Context, db PGMGDatabase, rows ...*Semester) ([]*Semester, error) {
	err := execJSONSaveAndReturn(ctx, db, func(i int) []interface{} { return rows[i].ReceiveRow() }, SQLSaveAndReturnBySemesterPkey, rows, len(rows))
	if err != nil {
		return rows, fmt.Errorf("%w(SaveAndReturnBySemesterPkey, %w)", ErrPGMG, err)
	}
	return rows, nil
}

var SQLDeleteBySemesterPkey = `
WITH __key AS (SELECT id FROM json_populate_recordset(null::"wise"."semester", $1))
DELETE FROM "wise"."semester" AS __table
	USING __key
	WHERE (__key."id" = __table."id")
	`

// DeleteBySemesterPkey deletes matching rows by SemesterPkey keys from table "semester"
func DeleteBySemesterPkey(ctx context.Context, db PGMGDatabase, keys ...SemesterPkey) (affected int64, err error) {
	b, err := json.Marshal(keys)
	if err != nil {
		return affected, fmt.Errorf("%w(DeleteBySemesterPkey, %w)", ErrPGMG, err)
	}
	if affected, err = db.Exec(ctx, SQLDeleteBySemesterPkey, b); err != nil {
		return affected, fmt.Errorf("%w(DeleteBySemesterPkey, %w)", ErrPGMG, err)
	}
	return affected, nil
}

// SemesterYearSeasonKey represents key defined by UNIQUE constraint "semester_year_season_key" for table "semester"
type SemesterYearSeasonKey struct {
	Year   int32  `json:"year"`
	Season string `json:"season"`
}

func (r *Semester) SemesterYearSeasonKey() SemesterYearSeasonKey {
	k := SemesterYearSeasonKey{}
	k.Year = r.Year
	k.Season = r.Season
	return k
}

var SQLGetBySemesterYearSeasonKey = `
	WITH __key AS (
		SELECT ROW_NUMBER() over () __keyindex,
			year, season
		FROM json_populate_recordset(null::"wise"."semester", $1)
	)
	SELECT "id", "year", "season"
	FROM __key JOIN "wise"."semester" AS __table USING ("year", "season")
	ORDER BY __keyindex
`

// GetBySemesterYearSeasonKey gets matching rows for given SemesterYearSeasonKey keys from table "semester"
func GetBySemesterYearSeasonKey(ctx context.Context, db PGMGDatabase, keys ...SemesterYearSeasonKey) (rows []*Semester, err error) {
	var b []byte
	if b, err = json.Marshal(keys); err != nil {
		return nil, fmt.Errorf("%w(GetBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	rows = make([]*Semester, len(keys))
	if _, err = db.QueryScan(ctx, func(i int) []interface{} {
		rows[i] = &Semester{}
		return rows[i].ReceiveRow()
	}, SQLGetBySemesterYearSeasonKey, b); err != nil {
		return nil, fmt.Errorf("%w(GetBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	for i := 0; i < len(keys); i++ {
		if rows[i] == nil {
			break
		} else if rows[i].SemesterYearSeasonKey() != keys[i] {
			copy(rows[i+1:], rows[i:])
			rows[i] = nil
		}
	}
	return rows, nil
}

var SQLSaveBySemesterYearSeasonKey = `
	WITH __values AS (
		SELECT
			COALESCE(__input."id", nextval('wise.semester_id_seq'::regclass)) "id",
			__input."year",
			__input."season"
		FROM json_populate_recordset(null::"wise"."semester", $1) __input
	)
	INSERT INTO "wise"."semester" AS _t ("id", "year", "season")
	SELECT "id", "year", "season" FROM __values
	ON CONFLICT ("year", "season") DO UPDATE
		SET ("id", "year", "season") = (
			SELECT "id", "year", "season" FROM __values
			WHERE __values."year" = _t."year"
				AND __values."season" = _t."season"
		)
`

// SaveBySemesterYearSeasonKey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_year_season_key"
func SaveBySemesterYearSeasonKey(ctx context.Context, db PGMGDatabase, rows ...*Semester) (err error) {
	if err = execJSONSave(ctx, db, SQLSaveBySemesterYearSeasonKey, rows, len(rows)); err != nil {
		return fmt.Errorf("%w(SaveBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	return nil
}

var SQLSaveAndReturnBySemesterYearSeasonKey = SQLSaveBySemesterYearSeasonKey + " RETURNING id, year, season"

// SaveAndReturnBySemesterYearSeasonKey upserts the given rows for table "semester" checking uniqueness by contstraint "semester_year_season_key"
// It returns the new values and scan them into given row references.
func SaveAndReturnBySemesterYearSeasonKey(ctx context.Context, db PGMGDatabase, rows ...*Semester) ([]*Semester, error) {
	err := execJSONSaveAndReturn(ctx, db, func(i int) []interface{} { return rows[i].ReceiveRow() }, SQLSaveAndReturnBySemesterYearSeasonKey, rows, len(rows))
	if err != nil {
		return rows, fmt.Errorf("%w(SaveAndReturnBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	return rows, nil
}

var SQLDeleteBySemesterYearSeasonKey = `
WITH __key AS (SELECT year, season FROM json_populate_recordset(null::"wise"."semester", $1))
DELETE FROM "wise"."semester" AS __table
	USING __key
	WHERE (__key."year" = __table."year")
	  AND (__key."season" = __table."season")
	`

// DeleteBySemesterYearSeasonKey deletes matching rows by SemesterYearSeasonKey keys from table "semester"
func DeleteBySemesterYearSeasonKey(ctx context.Context, db PGMGDatabase, keys ...SemesterYearSeasonKey) (affected int64, err error) {
	b, err := json.Marshal(keys)
	if err != nil {
		return affected, fmt.Errorf("%w(DeleteBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	if affected, err = db.Exec(ctx, SQLDeleteBySemesterYearSeasonKey, b); err != nil {
		return affected, fmt.Errorf("%w(DeleteBySemesterYearSeasonKey, %w)", ErrPGMG, err)
	}
	return affected, nil
}

// FindProductRows find the rows matching the condition from table "product"
func FindProductRows(ctx context.Context, db PGMGDatabase, cond ProductCondition) (rows []*Product, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return nil, err
	}
	_, err = db.QueryScan(ctx, func(i int) []interface{} {
		rows = append(rows, new(Product))
		return rows[i].ReceiveRow()
	}, `
		SELECT __t.id, __t.price, __t.stocked, __t.sold
		FROM "wise"."product" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'price' IS NULL) OR CAST($1::json->>'price' AS numeric) = __t."price")
			AND (($1::json->>'stocked' IS NULL) OR CAST($1::json->>'stocked' AS timestamp with time zone) = __t."stocked")
			AND (($1::json->>'sold' IS NULL) OR CAST($1::json->>'sold' AS timestamp with time zone) = __t."sold")
	`, arg1)
	return rows, err
}

// DeleteProductRows delete the rows matching the condition from table "product"
func DeleteProductRows(ctx context.Context, db PGMGDatabase, cond ProductCondition) (afftected int64, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return 0, err
	}
	return db.Exec(ctx, `
		DELETE FROM "wise"."product" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'price' IS NULL) OR CAST($1::json->>'price' AS numeric) = __t."price")
			AND (($1::json->>'stocked' IS NULL) OR CAST($1::json->>'stocked' AS timestamp with time zone) = __t."stocked")
			AND (($1::json->>'sold' IS NULL) OR CAST($1::json->>'sold' AS timestamp with time zone) = __t."sold")
	`, arg1)
}

// CountProductRows counts the number of rows matching the condition from table "product"
func CountProductRows(ctx context.Context, db PGMGDatabase, cond ProductCondition) (count int, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return 0, err
	}
	_, err = db.QueryScan(ctx, func(int) []interface{} { return []interface{}{&count} }, `
		SELECT count(*) FROM "wise"."product" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'price' IS NULL) OR CAST($1::json->>'price' AS numeric) = __t."price")
			AND (($1::json->>'stocked' IS NULL) OR CAST($1::json->>'stocked' AS timestamp with time zone) = __t."stocked")
			AND (($1::json->>'sold' IS NULL) OR CAST($1::json->>'sold' AS timestamp with time zone) = __t."sold")
	`, arg1)
	return count, err
}

// FindSemesterRows find the rows matching the condition from table "semester"
func FindSemesterRows(ctx context.Context, db PGMGDatabase, cond SemesterCondition) (rows []*Semester, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return nil, err
	}
	_, err = db.QueryScan(ctx, func(i int) []interface{} {
		rows = append(rows, new(Semester))
		return rows[i].ReceiveRow()
	}, `
		SELECT __t.id, __t.year, __t.season
		FROM "wise"."semester" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'year' IS NULL) OR CAST($1::json->>'year' AS integer) = __t."year")
			AND (($1::json->>'season' IS NULL) OR CAST($1::json->>'season' AS text) = __t."season")
	`, arg1)
	return rows, err
}

// DeleteSemesterRows delete the rows matching the condition from table "semester"
func DeleteSemesterRows(ctx context.Context, db PGMGDatabase, cond SemesterCondition) (afftected int64, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return 0, err
	}
	return db.Exec(ctx, `
		DELETE FROM "wise"."semester" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'year' IS NULL) OR CAST($1::json->>'year' AS integer) = __t."year")
			AND (($1::json->>'season' IS NULL) OR CAST($1::json->>'season' AS text) = __t."season")
	`, arg1)
}

// CountSemesterRows counts the number of rows matching the condition from table "semester"
func CountSemesterRows(ctx context.Context, db PGMGDatabase, cond SemesterCondition) (count int, err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(cond); err != nil {
		return 0, err
	}
	_, err = db.QueryScan(ctx, func(int) []interface{} { return []interface{}{&count} }, `
		SELECT count(*) FROM "wise"."semester" AS __t
		WHERE TRUE
			AND (($1::json->>'id' IS NULL) OR CAST($1::json->>'id' AS integer) = __t."id")
			AND (($1::json->>'year' IS NULL) OR CAST($1::json->>'year' AS integer) = __t."year")
			AND (($1::json->>'season' IS NULL) OR CAST($1::json->>'season' AS text) = __t."season")
	`, arg1)
	return count, err
}
func execJSONSave(ctx context.Context, db PGMGDatabase, sql string, rows interface{}, ern int) (err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(rows); err != nil {
		return err
	}
	if affected, err := db.Exec(ctx, sql, arg1); err != nil {
		return err
	} else if affected != int64(ern) {
		return ErrUnexpectedRowNumberAffected
	}
	return nil
}

func execJSONSaveAndReturn(ctx context.Context, db PGMGDatabase, receive func(int) []interface{}, sql string, rows interface{}, ern int) (err error) {
	var arg1 []byte
	if arg1, err = json.Marshal(rows); err != nil {
		return err
	}
	if affected, err := db.QueryScan(ctx, receive, sql, arg1); err != nil {
		return err
	} else if affected != ern {
		return ErrUnexpectedRowNumberAffected
	}
	return nil
}

// PGMGDatabase represents PostgresQL database
type PGMGDatabase interface {
	QueryScan(ctx context.Context, receiver func(int) []interface{}, sql string, args ...interface{}) (int, error)
	Exec(ctx context.Context, sql string, args ...interface{}) (int64, error)
}

var ErrUnexpectedRowNumberAffected = fmt.Errorf("pgmg: unexpected row number affected")
var ErrInvalidConditions = fmt.Errorf("pgmg: invalid conditions")

var ErrPGMG = fmt.Errorf("pgmg: error")
