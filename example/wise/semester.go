// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package wise

import (
	"encoding/json"

	"github.com/hanpama/pgmg/dsl"
)

type semesterTable struct {
	dsl.TableReference
	ID     semesterTableIDColumn
	Year   semesterTableYearColumn
	Season semesterTableSeasonColumn
}

func newSemesterTable(alias string) *semesterTable {
	table := dsl.TableReference{TableSchema: `wise`, TableName: `semester`, Alias: alias}
	return &semesterTable{
		table,
		semesterTableIDColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "id"},
		},
		semesterTableYearColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "year"},
		},
		semesterTableSeasonColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "season"},
		},
	}
}

// Semester represents table semester
var Semester = newSemesterTable("")

func (t *semesterTable) As(alias string) *semesterTable { return newSemesterTable(alias) }
func (t *semesterTable) AllColumns() []interface{} {
	return []interface{}{t.ID, t.Year, t.Season}
}

type semesterColumnValue interface {
	semesterColumn() string
	semesterValue() interface{}
}

type SemesterValues []semesterColumnValue

func (t *semesterTable) Values(vals ...semesterColumnValue) SemesterValues { return vals }

func (t *semesterTable) Input(
	year semesterTableYearValue,
	season semesterTableSeasonValue,
	optional ...semesterColumnValue,
) SemesterValues {
	return append(SemesterValues{
		year,
		season,
	}, optional...)
}

func (vs SemesterValues) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.semesterColumn()] = v.semesterValue()
	}
	return json.Marshal(r)
}

type semesterTableIDColumn struct{ dsl.ColumnReference }
type semesterTableIDValue int32
type semesterTableYearColumn struct{ dsl.ColumnReference }
type semesterTableYearValue int32
type semesterTableSeasonColumn struct{ dsl.ColumnReference }
type semesterTableSeasonValue string

func (semesterTableIDColumn) New(val int32) semesterTableIDValue { return semesterTableIDValue(val) }
func (semesterTableYearColumn) New(val int32) semesterTableYearValue {
	return semesterTableYearValue(val)
}
func (semesterTableSeasonColumn) New(val string) semesterTableSeasonValue {
	return semesterTableSeasonValue(val)
}

func (semesterTableIDValue) semesterColumn() string           { return "id" }
func (v semesterTableIDValue) semesterValue() interface{}     { return (int32)(v) }
func (semesterTableYearValue) semesterColumn() string         { return "year" }
func (v semesterTableYearValue) semesterValue() interface{}   { return (int32)(v) }
func (semesterTableSeasonValue) semesterColumn() string       { return "season" }
func (v semesterTableSeasonValue) semesterValue() interface{} { return (string)(v) }

type SemesterRow struct {
	ID     int32  `json:"id"`
	Year   int32  `json:"year"`
	Season string `json:"season"`
}

func (r *SemesterRow) Receive() []interface{} {
	return []interface{}{&r.ID, &r.Year, &r.Season}
}

type SemesterRows []SemesterRow

func (rs *SemesterRows) Receive() []interface{} {
	*rs = append(*rs, SemesterRow{})
	return (*rs)[len(*rs)-1].Receive()
}

func (t *semesterTable) Select() *dsl.SelectQuery {
	return dsl.
		Select(t.AllColumns()...).From(t)
}

func (t *semesterTable) InsertOneJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.semester_id_seq'::regclass)"),
				`__iv__."year"`,
				`__iv__."season"`,
			).
				Fromf(`json_populate_record(null::%s, %s) AS __iv__`, Semester, jsonExpr),
		)
}

func (t *semesterTable) InsertManyJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.semester_id_seq'::regclass)"),
				`__iv__."year"`,
				`__iv__."season"`,
			).
				Fromf(`json_populate_recordset(null::%s, %s) AS __iv__`, Semester, jsonExpr),
		)
}

func (t *semesterTable) UpdateJSON(jsonExpr interface{}) *dsl.UpdateQuery {
	return dsl.
		Update(t).
		Set(
			t.ID.Set(dsl.Coalesce(`__ch__."id"`, t.ID)),
			t.Year.Set(dsl.Coalesce(`__ch__."year"`, t.Year)),
			t.Season.Set(dsl.Coalesce(`__ch__."season"`, t.Season)),
		).
		Fromf(`json_populate_record(null::%s, %s) AS __ch__`, Semester, jsonExpr)
}

func (t *semesterTable) DeleteWhere(cond interface{}) *dsl.DeleteQuery {
	return dsl.
		DeleteFrom(t).Where(dsl.WrapExpr(cond))
}
