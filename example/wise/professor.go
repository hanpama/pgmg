// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package wise

import (
	"encoding/json"

	"github.com/hanpama/pgmg/dsl"
)

type professorTable struct {
	dsl.TableReference
	ID         dsl.ColumnReference
	FamilyName dsl.ColumnReference
	GivenName  dsl.ColumnReference
}

func newProfessorTable(alias string) *professorTable {
	table := dsl.TableReference{TableSchema: `wise`, TableName: `professor`, Alias: alias}
	return &professorTable{
		table,
		dsl.ColumnReference{TableReference: table, ColumnName: "id"},
		dsl.ColumnReference{TableReference: table, ColumnName: "family_name"},
		dsl.ColumnReference{TableReference: table, ColumnName: "given_name"},
	}
}

// Professor represents table professor
var Professor = newProfessorTable("")

func (t *professorTable) As(alias string) *professorTable { return newProfessorTable(alias) }
func (t *professorTable) AllColumns() []interface{} {
	return []interface{}{t.ID, t.FamilyName, t.GivenName}
}

type professorColumnValue interface {
	professorColumn() string
	professorValue() interface{}
}

type ProfessorValues []professorColumnValue

func (t *professorTable) Input(
	familyName professorTableFamilyName,
	givenName professorTableGivenName,
	optional ...professorColumnValue,
) ProfessorValues {
	return append(ProfessorValues{
		familyName,
		givenName,
	}, optional...)
}

func (vs ProfessorValues) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.professorColumn()] = v.professorValue()
	}
	return json.Marshal(r)
}

func (t *professorTable) NewID(val int32) professorTableID { return professorTableID(val) }
func (t *professorTable) NewFamilyName(val string) professorTableFamilyName {
	return professorTableFamilyName(val)
}
func (t *professorTable) NewGivenName(val string) professorTableGivenName {
	return professorTableGivenName(val)
}

type professorTableID int32
type professorTableFamilyName string
type professorTableGivenName string

func (professorTableID) professorColumn() string               { return "id" }
func (v professorTableID) professorValue() interface{}         { return (int32)(v) }
func (professorTableFamilyName) professorColumn() string       { return "family_name" }
func (v professorTableFamilyName) professorValue() interface{} { return (string)(v) }
func (professorTableGivenName) professorColumn() string        { return "given_name" }
func (v professorTableGivenName) professorValue() interface{}  { return (string)(v) }

type ProfessorRow struct {
	ID         int32  `json:"id"`
	FamilyName string `json:"family_name"`
	GivenName  string `json:"given_name"`
}

func (r *ProfessorRow) Receive() []interface{} {
	return []interface{}{&r.ID, &r.FamilyName, &r.GivenName}
}

type ProfessorRows []ProfessorRow

func (rs *ProfessorRows) Receive() []interface{} {
	*rs = append(*rs, ProfessorRow{})
	return (*rs)[len(*rs)-1].Receive()
}

func (t *professorTable) Select() *dsl.SelectQuery {
	return dsl.
		Select(t.AllColumns()...).From(t)
}

func (t *professorTable) InsertOneJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.professor_id_seq'::regclass)"),
				`__iv__."family_name"`,
				`__iv__."given_name"`,
			).
				Fromf(`json_populate_record(null::%s, %s) AS __iv__`, Professor, jsonExpr),
		)
}

func (t *professorTable) InsertManyJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.professor_id_seq'::regclass)"),
				`__iv__."family_name"`,
				`__iv__."given_name"`,
			).
				Fromf(`json_populate_recordset(null::%s, %s) AS __iv__`, Professor, jsonExpr),
		)
}

func (t *professorTable) UpdateJSON(jsonExpr interface{}) *dsl.UpdateQuery {
	return dsl.
		Update(t).
		Set(
			t.ID.Set(dsl.Coalesce(`__ch__."id"`, t.ID)),
			t.FamilyName.Set(dsl.Coalesce(`__ch__."family_name"`, t.FamilyName)),
			t.GivenName.Set(dsl.Coalesce(`__ch__."given_name"`, t.GivenName)),
		).
		Fromf(`json_populate_record(null::%s, %s) AS __ch__`, Professor, jsonExpr)
}

func (t *professorTable) DeleteWhere(cond interface{}) *dsl.DeleteQuery {
	return dsl.
		DeleteFrom(t).Where(dsl.WrapExpr(cond))
}
