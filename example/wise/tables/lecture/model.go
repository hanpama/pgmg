// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package lecture

import (
	"encoding/json"
)

type Record struct {
	ID         int32  `json:"id"`
	Title      string `json:"title"`
	SemesterID int32  `json:"semester_id"`
	CourseID   int32  `json:"course_id"`
	TutorID    int32  `json:"tutor_id"`
}

type LecturePkey struct {
	ID int32 `json:"id"`
}
type LectureSemesterIDCourseIDTutorIDKey struct {
	SemesterID int32 `json:"semester_id"`
	CourseID   int32 `json:"course_id"`
	TutorID    int32 `json:"tutor_id"`
}

type ID int32
type Title string
type SemesterID int32
type CourseID int32
type TutorID int32

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.ID,
		&r.Title,
		&r.SemesterID,
		&r.CourseID,
		&r.TutorID,
	}
}

type Recordset []Record

func (rs *Recordset) ReceiveNext() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	title Title,
	semesterID SemesterID,
	courseID CourseID,
	tutorID TutorID,
	attrs ...attribute,
) Values {
	return append(Values{
		title,
		semesterID,
		courseID,
		tutorID,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v ID) ApplyTo(r *Record)          { r.ID = (int32)(v) }
func (v ID) Column() string             { return "id" }
func (v ID) Value() interface{}         { return (int32)(v) }
func (v Title) ApplyTo(r *Record)       { r.Title = (string)(v) }
func (v Title) Column() string          { return "title" }
func (v Title) Value() interface{}      { return (string)(v) }
func (v SemesterID) ApplyTo(r *Record)  { r.SemesterID = (int32)(v) }
func (v SemesterID) Column() string     { return "semester_id" }
func (v SemesterID) Value() interface{} { return (int32)(v) }
func (v CourseID) ApplyTo(r *Record)    { r.CourseID = (int32)(v) }
func (v CourseID) Column() string       { return "course_id" }
func (v CourseID) Value() interface{}   { return (int32)(v) }
func (v TutorID) ApplyTo(r *Record)     { r.TutorID = (int32)(v) }
func (v TutorID) Column() string        { return "tutor_id" }
func (v TutorID) Value() interface{}    { return (int32)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
