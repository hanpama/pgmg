// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package lecture

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "wise"."lecture" (
			"id",
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		)
		SELECT
			COALESCE("id", nextval('wise.lecture_id_seq'::regclass)),
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		FROM json_populate_recordset(null::"wise"."lecture", $1)`
	InsertReturningSQL = `
		INSERT INTO "wise"."lecture" (
			"id",
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		)
		SELECT
			COALESCE("id", nextval('wise.lecture_id_seq'::regclass)),
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		FROM json_populate_recordset(null::"wise"."lecture", $1)
		RETURNING
			"id",
			"title",
			"semester_id",
			"course_id",
			"tutor_id"`
)

func (k LecturePkey) selectSQL() Query {
	return Query{SelectLecturePkey, []interface{}{
		k.ID,
	}}
}
func (k LecturePkey) updateSQL(args ...attribute) Query {
	return Query{UpdateLecturePkey, []interface{}{
		k.ID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k LecturePkey) deleteSQL() Query {
	return Query{DeleteLecturePkey, []interface{}{
		k.ID,
	}}
}

const (
	SelectLecturePkey = `
		SELECT 
			"id",
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		FROM "wise"."lecture" WHERE ("id") = ($1) LIMIT 1`
	UpdateLecturePkey = `
		UPDATE "wise"."lecture" __ut__
		SET "id" = COALESCE(__ch__."id", __ut__."id"),
			"title" = COALESCE(__ch__."title", __ut__."title"),
			"semester_id" = COALESCE(__ch__."semester_id", __ut__."semester_id"),
			"course_id" = COALESCE(__ch__."course_id", __ut__."course_id"),
			"tutor_id" = COALESCE(__ch__."tutor_id", __ut__."tutor_id")
		FROM (SELECT * FROM json_populate_record(null::"wise"."lecture", $2)) __ch__
		WHERE (__ut__."id") = ($1)`
	DeleteLecturePkey = `
		DELETE FROM "wise"."lecture"
		WHERE ("id") = ($1)`
)

func (k LectureSemesterIDCourseIDTutorIDKey) selectSQL() Query {
	return Query{SelectLectureSemesterIDCourseIDTutorIDKey, []interface{}{
		k.SemesterID,
		k.CourseID,
		k.TutorID,
	}}
}
func (k LectureSemesterIDCourseIDTutorIDKey) updateSQL(args ...attribute) Query {
	return Query{UpdateLectureSemesterIDCourseIDTutorIDKey, []interface{}{
		k.SemesterID,
		k.CourseID,
		k.TutorID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k LectureSemesterIDCourseIDTutorIDKey) deleteSQL() Query {
	return Query{DeleteLectureSemesterIDCourseIDTutorIDKey, []interface{}{
		k.SemesterID,
		k.CourseID,
		k.TutorID,
	}}
}

const (
	SelectLectureSemesterIDCourseIDTutorIDKey = `
		SELECT 
			"id",
			"title",
			"semester_id",
			"course_id",
			"tutor_id"
		FROM "wise"."lecture" WHERE ("semester_id", "course_id", "tutor_id") = ($1, $2, $3) LIMIT 1`
	UpdateLectureSemesterIDCourseIDTutorIDKey = `
		UPDATE "wise"."lecture" __ut__
		SET "id" = COALESCE(__ch__."id", __ut__."id"),
			"title" = COALESCE(__ch__."title", __ut__."title"),
			"semester_id" = COALESCE(__ch__."semester_id", __ut__."semester_id"),
			"course_id" = COALESCE(__ch__."course_id", __ut__."course_id"),
			"tutor_id" = COALESCE(__ch__."tutor_id", __ut__."tutor_id")
		FROM (SELECT * FROM json_populate_record(null::"wise"."lecture", $2)) __ch__
		WHERE (__ut__."semester_id", __ut__."course_id", __ut__."tutor_id") = ($1, $2, $3)`
	DeleteLectureSemesterIDCourseIDTutorIDKey = `
		DELETE FROM "wise"."lecture"
		WHERE ("semester_id", "course_id", "tutor_id") = ($1, $2, $3)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
