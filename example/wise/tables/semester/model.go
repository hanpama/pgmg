// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package semester

import (
	"encoding/json"
)

type Record struct {
	ID     int32  `json:"id"`
	Year   int32  `json:"year"`
	Season string `json:"season"`
}

type SemesterPkey struct {
	ID int32 `json:"id"`
}
type SemesterYearSeasonKey struct {
	Year   int32  `json:"year"`
	Season string `json:"season"`
}

type ID int32
type Year int32
type Season string

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.ID,
		&r.Year,
		&r.Season,
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	year Year,
	season Season,
	attrs ...attribute,
) Values {
	return append(Values{
		year,
		season,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v ID) ApplyTo(r *Record)      { r.ID = (int32)(v) }
func (v ID) Column() string         { return "id" }
func (v ID) Value() interface{}     { return (int32)(v) }
func (v Year) ApplyTo(r *Record)    { r.Year = (int32)(v) }
func (v Year) Column() string       { return "year" }
func (v Year) Value() interface{}   { return (int32)(v) }
func (v Season) ApplyTo(r *Record)  { r.Season = (string)(v) }
func (v Season) Column() string     { return "season" }
func (v Season) Value() interface{} { return (string)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
