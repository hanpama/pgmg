// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package wise

import (
	"encoding/json"

	"github.com/hanpama/pgmg/dsl"
)

type lectureTable struct {
	dsl.TableReference
	ID         lectureTableIDColumn
	Title      lectureTableTitleColumn
	SemesterID lectureTableSemesterIDColumn
	CourseID   lectureTableCourseIDColumn
	TutorID    lectureTableTutorIDColumn
}

func newLectureTable(alias string) *lectureTable {
	table := dsl.TableReference{TableSchema: `wise`, TableName: `lecture`, Alias: alias}
	return &lectureTable{
		table,
		lectureTableIDColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "id"},
		},
		lectureTableTitleColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "title"},
		},
		lectureTableSemesterIDColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "semester_id"},
		},
		lectureTableCourseIDColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "course_id"},
		},
		lectureTableTutorIDColumn{
			dsl.ColumnReference{TableReference: table, ColumnName: "tutor_id"},
		},
	}
}

// Lecture represents table lecture
var Lecture = newLectureTable("")

func (t *lectureTable) As(alias string) *lectureTable { return newLectureTable(alias) }
func (t *lectureTable) AllColumns() []interface{} {
	return []interface{}{t.ID, t.Title, t.SemesterID, t.CourseID, t.TutorID}
}

type lectureColumnValue interface {
	lectureColumn() string
	lectureValue() interface{}
}

type LectureValues []lectureColumnValue

func (t *lectureTable) Values(vals ...lectureColumnValue) LectureValues { return vals }

func (t *lectureTable) Input(
	title lectureTableTitleValue,
	semesterID lectureTableSemesterIDValue,
	courseID lectureTableCourseIDValue,
	tutorID lectureTableTutorIDValue,
	optional ...lectureColumnValue,
) LectureValues {
	return append(LectureValues{
		title,
		semesterID,
		courseID,
		tutorID,
	}, optional...)
}

func (vs LectureValues) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.lectureColumn()] = v.lectureValue()
	}
	return json.Marshal(r)
}

type lectureTableIDColumn struct{ dsl.ColumnReference }
type lectureTableIDValue int32
type lectureTableTitleColumn struct{ dsl.ColumnReference }
type lectureTableTitleValue string
type lectureTableSemesterIDColumn struct{ dsl.ColumnReference }
type lectureTableSemesterIDValue int32
type lectureTableCourseIDColumn struct{ dsl.ColumnReference }
type lectureTableCourseIDValue int32
type lectureTableTutorIDColumn struct{ dsl.ColumnReference }
type lectureTableTutorIDValue int32

func (lectureTableIDColumn) New(val int32) lectureTableIDValue { return lectureTableIDValue(val) }
func (lectureTableTitleColumn) New(val string) lectureTableTitleValue {
	return lectureTableTitleValue(val)
}
func (lectureTableSemesterIDColumn) New(val int32) lectureTableSemesterIDValue {
	return lectureTableSemesterIDValue(val)
}
func (lectureTableCourseIDColumn) New(val int32) lectureTableCourseIDValue {
	return lectureTableCourseIDValue(val)
}
func (lectureTableTutorIDColumn) New(val int32) lectureTableTutorIDValue {
	return lectureTableTutorIDValue(val)
}

func (lectureTableIDValue) lectureColumn() string               { return "id" }
func (v lectureTableIDValue) lectureValue() interface{}         { return (int32)(v) }
func (lectureTableTitleValue) lectureColumn() string            { return "title" }
func (v lectureTableTitleValue) lectureValue() interface{}      { return (string)(v) }
func (lectureTableSemesterIDValue) lectureColumn() string       { return "semester_id" }
func (v lectureTableSemesterIDValue) lectureValue() interface{} { return (int32)(v) }
func (lectureTableCourseIDValue) lectureColumn() string         { return "course_id" }
func (v lectureTableCourseIDValue) lectureValue() interface{}   { return (int32)(v) }
func (lectureTableTutorIDValue) lectureColumn() string          { return "tutor_id" }
func (v lectureTableTutorIDValue) lectureValue() interface{}    { return (int32)(v) }

type LectureRow struct {
	ID         int32  `json:"id"`
	Title      string `json:"title"`
	SemesterID int32  `json:"semester_id"`
	CourseID   int32  `json:"course_id"`
	TutorID    int32  `json:"tutor_id"`
}

func (r *LectureRow) Receive() []interface{} {
	return []interface{}{&r.ID, &r.Title, &r.SemesterID, &r.CourseID, &r.TutorID}
}

type LectureRows []LectureRow

func (rs *LectureRows) Receive() []interface{} {
	*rs = append(*rs, LectureRow{})
	return (*rs)[len(*rs)-1].Receive()
}

func (t *lectureTable) Select() *dsl.SelectQuery {
	return dsl.
		Select(t.AllColumns()...).From(t)
}

func (t *lectureTable) InsertOneJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.lecture_id_seq'::regclass)"),
				`__iv__."title"`,
				`__iv__."semester_id"`,
				`__iv__."course_id"`,
				`__iv__."tutor_id"`,
			).
				Fromf(`json_populate_record(null::%s, %s) AS __iv__`, Lecture, jsonExpr),
		)
}

func (t *lectureTable) InsertManyJSON(jsonExpr interface{}) *dsl.InsertQuery {
	return dsl.
		InsertInto(t, t.AllColumns()...).
		Select(
			dsl.Select(
				dsl.Coalesce(`__iv__."id"`, "nextval('wise.lecture_id_seq'::regclass)"),
				`__iv__."title"`,
				`__iv__."semester_id"`,
				`__iv__."course_id"`,
				`__iv__."tutor_id"`,
			).
				Fromf(`json_populate_recordset(null::%s, %s) AS __iv__`, Lecture, jsonExpr),
		)
}

func (t *lectureTable) UpdateJSON(jsonExpr interface{}) *dsl.UpdateQuery {
	return dsl.
		Update(t).
		Set(
			t.ID.Set(dsl.Coalesce(`__ch__."id"`, t.ID)),
			t.Title.Set(dsl.Coalesce(`__ch__."title"`, t.Title)),
			t.SemesterID.Set(dsl.Coalesce(`__ch__."semester_id"`, t.SemesterID)),
			t.CourseID.Set(dsl.Coalesce(`__ch__."course_id"`, t.CourseID)),
			t.TutorID.Set(dsl.Coalesce(`__ch__."tutor_id"`, t.TutorID)),
		).
		Fromf(`json_populate_record(null::%s, %s) AS __ch__`, Lecture, jsonExpr)
}

func (t *lectureTable) DeleteWhere(cond interface{}) *dsl.DeleteQuery {
	return dsl.
		DeleteFrom(t).Where(dsl.WrapExpr(cond))
}
