// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package order_details

import (
	"encoding/json"
)

type Record struct {
	OrderID   int16   `json:"order_id"`
	ProductID int16   `json:"product_id"`
	UnitPrice float32 `json:"unit_price"`
	Quantity  int16   `json:"quantity"`
	Discount  float32 `json:"discount"`
}

type PkOrderDetails struct {
	OrderID   int16 `json:"order_id"`
	ProductID int16 `json:"product_id"`
}

type OrderID int16
type ProductID int16
type UnitPrice float32
type Quantity int16
type Discount float32

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.OrderID,
		&r.ProductID,
		&r.UnitPrice,
		&r.Quantity,
		&r.Discount,
	}
}

type Recordset []Record

func (rs *Recordset) ReceiveNext() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	orderID OrderID,
	productID ProductID,
	unitPrice UnitPrice,
	quantity Quantity,
	discount Discount,
	attrs ...attribute,
) Values {
	return append(Values{
		orderID,
		productID,
		unitPrice,
		quantity,
		discount,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v OrderID) ApplyTo(r *Record)    { r.OrderID = (int16)(v) }
func (v OrderID) Column() string       { return "order_id" }
func (v OrderID) Value() interface{}   { return (int16)(v) }
func (v ProductID) ApplyTo(r *Record)  { r.ProductID = (int16)(v) }
func (v ProductID) Column() string     { return "product_id" }
func (v ProductID) Value() interface{} { return (int16)(v) }
func (v UnitPrice) ApplyTo(r *Record)  { r.UnitPrice = (float32)(v) }
func (v UnitPrice) Column() string     { return "unit_price" }
func (v UnitPrice) Value() interface{} { return (float32)(v) }
func (v Quantity) ApplyTo(r *Record)   { r.Quantity = (int16)(v) }
func (v Quantity) Column() string      { return "quantity" }
func (v Quantity) Value() interface{}  { return (int16)(v) }
func (v Discount) ApplyTo(r *Record)   { r.Discount = (float32)(v) }
func (v Discount) Column() string      { return "discount" }
func (v Discount) Value() interface{}  { return (float32)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
