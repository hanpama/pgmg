// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package order_details

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "order_details"
		SELECT * FROM json_populate_recordset(null::"order_details", $1) `
	InsertReturningSQL = `
		INSERT INTO "order_details"
		SELECT * FROM json_populate_recordset(null::"order_details", $1)
		RETURNING *`
)

func (k PkOrderDetails) selectSQL() Query {
	return Query{SelectPkOrderDetails, []interface{}{
		k.OrderID,
		k.ProductID,
	}}
}
func (k PkOrderDetails) updateSQL(args ...attribute) Query {
	return Query{UpdatePkOrderDetails, []interface{}{
		k.OrderID,
		k.ProductID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkOrderDetails) deleteSQL() Query {
	return Query{DeletePkOrderDetails, []interface{}{
		k.OrderID,
		k.ProductID,
	}}
}

const (
	SelectPkOrderDetails = `
		SELECT * FROM "order_details" WHERE ("order_details"."order_id", "order_details"."product_id") = ($1, $2) LIMIT 1
		`
	UpdatePkOrderDetails = `
		UPDATE "order_details"
		SET "order_id" = COALESCE(_ch."order_id", "order_details"."order_id"),
			"product_id" = COALESCE(_ch."product_id", "order_details"."product_id"),
			"unit_price" = COALESCE(_ch."unit_price", "order_details"."unit_price"),
			"quantity" = COALESCE(_ch."quantity", "order_details"."quantity"),
			"discount" = COALESCE(_ch."discount", "order_details"."discount")
		FROM (SELECT * FROM json_populate_record(null::"order_details", $2)) _ch
		WHERE ("order_details"."order_id", "order_details"."product_id") = ($1, $2)`
	DeletePkOrderDetails = `
		DELETE FROM "order_details"
		WHERE ("order_details"."order_id", "order_details"."product_id") = ($1, $2)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
