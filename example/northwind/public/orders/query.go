// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package orders

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "public"."orders" (
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"
		)
		SELECT
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"
		FROM json_populate_recordset(null::"public"."orders", $1)`
	InsertReturningSQL = `
		INSERT INTO "public"."orders" (
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"
		)
		SELECT
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"
		FROM json_populate_recordset(null::"public"."orders", $1)
		RETURNING
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"`
)

func (k PkOrders) selectSQL() Query {
	return Query{SelectPkOrders, []interface{}{
		k.OrderID,
	}}
}
func (k PkOrders) updateSQL(args ...attribute) Query {
	return Query{UpdatePkOrders, []interface{}{
		k.OrderID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkOrders) deleteSQL() Query {
	return Query{DeletePkOrders, []interface{}{
		k.OrderID,
	}}
}

const (
	SelectPkOrders = `
		SELECT 
			"order_id",
			"customer_id",
			"employee_id",
			"order_date",
			"required_date",
			"shipped_date",
			"ship_via",
			"freight",
			"ship_name",
			"ship_address",
			"ship_city",
			"ship_region",
			"ship_postal_code",
			"ship_country"
		FROM "public"."orders" WHERE ("order_id") = ($1) LIMIT 1`
	UpdatePkOrders = `
		UPDATE "public"."orders" __ut__
		SET "order_id" = COALESCE(__ch__."order_id", __ut__."order_id"),
			"customer_id" = COALESCE(__ch__."customer_id", __ut__."customer_id"),
			"employee_id" = COALESCE(__ch__."employee_id", __ut__."employee_id"),
			"order_date" = COALESCE(__ch__."order_date", __ut__."order_date"),
			"required_date" = COALESCE(__ch__."required_date", __ut__."required_date"),
			"shipped_date" = COALESCE(__ch__."shipped_date", __ut__."shipped_date"),
			"ship_via" = COALESCE(__ch__."ship_via", __ut__."ship_via"),
			"freight" = COALESCE(__ch__."freight", __ut__."freight"),
			"ship_name" = COALESCE(__ch__."ship_name", __ut__."ship_name"),
			"ship_address" = COALESCE(__ch__."ship_address", __ut__."ship_address"),
			"ship_city" = COALESCE(__ch__."ship_city", __ut__."ship_city"),
			"ship_region" = COALESCE(__ch__."ship_region", __ut__."ship_region"),
			"ship_postal_code" = COALESCE(__ch__."ship_postal_code", __ut__."ship_postal_code"),
			"ship_country" = COALESCE(__ch__."ship_country", __ut__."ship_country")
		FROM (SELECT * FROM json_populate_record(null::"public"."orders", $2)) __ch__
		WHERE (__ut__."order_id") = ($1)`
	DeletePkOrders = `
		DELETE FROM "public"."orders"
		WHERE ("order_id") = ($1)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
