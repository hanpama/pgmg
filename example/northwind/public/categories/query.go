// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package categories

func Insert(vss ...Values) Query {
	return query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "public"."categories" (
			"category_id",
			"category_name",
			"description",
			"picture"
		)
		SELECT
			"category_id",
			"category_name",
			"description",
			"picture"
		FROM json_populate_recordset(null::"public"."categories", $1)`
	InsertReturningSQL = `
		INSERT INTO "public"."categories" (
			"category_id",
			"category_name",
			"description",
			"picture"
		)
		SELECT
			"category_id",
			"category_name",
			"description",
			"picture"
		FROM json_populate_recordset(null::"public"."categories", $1)
		RETURNING
			"category_id",
			"category_name",
			"description",
			"picture"`
)

func (k PkCategories) selectSQL() Query {
	return selectPkCategoriesQuery{k}
}
func (k PkCategories) updateSQL(args ...attribute) Query {
	return query{UpdatePkCategories, []interface{}{
		k.CategoryID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkCategories) deleteSQL() Query {
	return query{DeletePkCategories, []interface{}{
		k.CategoryID,
	}}
}

const (
	SelectPkCategories = `
		SELECT 
			"category_id",
			"category_name",
			"description",
			"picture"
		FROM "public"."categories" WHERE ("category_id") = ($1) LIMIT 1`
	UpdatePkCategories = `
		UPDATE "public"."categories" __ut__
		SET "category_id" = COALESCE(__ch__."category_id", __ut__."category_id"),
			"category_name" = COALESCE(__ch__."category_name", __ut__."category_name"),
			"description" = COALESCE(__ch__."description", __ut__."description"),
			"picture" = COALESCE(__ch__."picture", __ut__."picture")
		FROM (SELECT * FROM json_populate_record(null::"public"."categories", $2)) __ch__
		WHERE (__ut__."category_id") = ($1)`
	DeletePkCategories = `
		DELETE FROM "public"."categories"
		WHERE ("category_id") = ($1)`
)

type selectPkCategoriesQuery struct{ key PkCategories }

func (q selectPkCategoriesQuery) SQL() string         { return SelectPkCategories }
func (q selectPkCategoriesQuery) Args() []interface{} { return []interface{}{q.key.CategoryID} }

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query interface {
	SQL() string
	Args() []interface{}
}

type query struct {
	sql  string
	args []interface{}
}

func (q query) SQL() string         { return q.sql }
func (q query) Args() []interface{} { return q.args }
