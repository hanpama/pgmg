// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package categories

import (
	"encoding/json"
)

type Record struct {
	CategoryID   int16   `json:"category_id"`
	CategoryName string  `json:"category_name"`
	Description  *string `json:"description"`
	Picture      []byte  `json:"picture"`
}

type PkCategories struct {
	CategoryID int16 `json:"category_id"`
}

type CategoryID int16
type CategoryName string
type Description string
type Picture []byte

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.CategoryID,
		&r.CategoryName,
		&r.Description,
		&r.Picture,
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	categoryID CategoryID,
	categoryName CategoryName,
	attrs ...attribute,
) Values {
	return append(Values{
		categoryID,
		categoryName,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v CategoryID) ApplyTo(r *Record)    { r.CategoryID = (int16)(v) }
func (v CategoryID) Column() string       { return "category_id" }
func (v CategoryID) Value() interface{}   { return (int16)(v) }
func (v CategoryName) ApplyTo(r *Record)  { r.CategoryName = (string)(v) }
func (v CategoryName) Column() string     { return "category_name" }
func (v CategoryName) Value() interface{} { return (string)(v) }
func (v Description) ApplyTo(r *Record)   { r.Description = (*string)(&v) }
func (v Description) Column() string      { return "description" }
func (v Description) Value() interface{}  { return (string)(v) }
func (v Picture) ApplyTo(r *Record)       { r.Picture = ([]byte)(&v) }
func (v Picture) Column() string          { return "picture" }
func (v Picture) Value() interface{}      { return ([]byte)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
