// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package customer_customer_demo

import (
	"encoding/json"
)

type Record struct {
	CustomerID     string `json:"customer_id"`
	CustomerTypeID string `json:"customer_type_id"`
}

type PkCustomerCustomerDemo struct {
	CustomerID     string `json:"customer_id"`
	CustomerTypeID string `json:"customer_type_id"`
}

type CustomerID string
type CustomerTypeID string

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.CustomerID,
		&r.CustomerTypeID,
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	customerID CustomerID,
	customerTypeID CustomerTypeID,
	attrs ...attribute,
) Values {
	return append(Values{
		customerID,
		customerTypeID,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v CustomerID) ApplyTo(r *Record)      { r.CustomerID = (string)(v) }
func (v CustomerID) Column() string         { return "customer_id" }
func (v CustomerID) Value() interface{}     { return (string)(v) }
func (v CustomerTypeID) ApplyTo(r *Record)  { r.CustomerTypeID = (string)(v) }
func (v CustomerTypeID) Column() string     { return "customer_type_id" }
func (v CustomerTypeID) Value() interface{} { return (string)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
