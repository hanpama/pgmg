// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package customer_customer_demo

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "customer_customer_demo"
		SELECT * FROM json_populate_recordset(null::"customer_customer_demo", $1) `
	InsertReturningSQL = `
		INSERT INTO "customer_customer_demo"
		SELECT * FROM json_populate_recordset(null::"customer_customer_demo", $1)
		RETURNING *`
)

func (k PkCustomerCustomerDemo) selectSQL() Query {
	return Query{SelectPkCustomerCustomerDemo, []interface{}{
		k.CustomerID,
		k.CustomerTypeID,
	}}
}
func (k PkCustomerCustomerDemo) updateSQL(args ...attribute) Query {
	return Query{UpdatePkCustomerCustomerDemo, []interface{}{
		k.CustomerID,
		k.CustomerTypeID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkCustomerCustomerDemo) deleteSQL() Query {
	return Query{DeletePkCustomerCustomerDemo, []interface{}{
		k.CustomerID,
		k.CustomerTypeID,
	}}
}

const (
	SelectPkCustomerCustomerDemo = `
		SELECT * FROM "customer_customer_demo" WHERE ("customer_customer_demo"."customer_id", "customer_customer_demo"."customer_type_id") = ($1, $2) LIMIT 1
		`
	UpdatePkCustomerCustomerDemo = `
		UPDATE "customer_customer_demo"
		SET "customer_id" = COALESCE(_ch."customer_id", "customer_customer_demo"."customer_id"),
			"customer_type_id" = COALESCE(_ch."customer_type_id", "customer_customer_demo"."customer_type_id")
		FROM (SELECT * FROM json_populate_record(null::"customer_customer_demo", $2)) _ch
		WHERE ("customer_customer_demo"."customer_id", "customer_customer_demo"."customer_type_id") = ($1, $2)`
	DeletePkCustomerCustomerDemo = `
		DELETE FROM "customer_customer_demo"
		WHERE ("customer_customer_demo"."customer_id", "customer_customer_demo"."customer_type_id") = ($1, $2)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
