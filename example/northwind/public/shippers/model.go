// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package shippers

import (
	"encoding/json"
)

type Record struct {
	ShipperID   int16   `json:"shipper_id"`
	CompanyName string  `json:"company_name"`
	Phone       *string `json:"phone"`
}

type PkShippers struct {
	ShipperID int16 `json:"shipper_id"`
}

type ShipperID int16
type CompanyName string
type Phone string

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.ShipperID,
		&r.CompanyName,
		&r.Phone,
	}
}

type Recordset []Record

func (rs *Recordset) ReceiveNext() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	shipperID ShipperID,
	companyName CompanyName,
	attrs ...attribute,
) Values {
	return append(Values{
		shipperID,
		companyName,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v ShipperID) ApplyTo(r *Record)    { r.ShipperID = (int16)(v) }
func (v ShipperID) Column() string       { return "shipper_id" }
func (v ShipperID) Value() interface{}   { return (int16)(v) }
func (v CompanyName) ApplyTo(r *Record)  { r.CompanyName = (string)(v) }
func (v CompanyName) Column() string     { return "company_name" }
func (v CompanyName) Value() interface{} { return (string)(v) }
func (v Phone) ApplyTo(r *Record)        { r.Phone = (*string)(&v) }
func (v Phone) Column() string           { return "phone" }
func (v Phone) Value() interface{}       { return (string)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
