// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package region

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "public"."region" (
			"region_id",
			"region_description"
		)
		SELECT
			"region_id",
			"region_description"
		FROM json_populate_recordset(null::"public"."region", $1)`
	InsertReturningSQL = `
		INSERT INTO "public"."region" (
			"region_id",
			"region_description"
		)
		SELECT
			"region_id",
			"region_description"
		FROM json_populate_recordset(null::"public"."region", $1)
		RETURNING
			"region_id",
			"region_description"`
)

func (k PkRegion) selectSQL() Query {
	return Query{SelectPkRegion, []interface{}{
		k.RegionID,
	}}
}
func (k PkRegion) updateSQL(args ...attribute) Query {
	return Query{UpdatePkRegion, []interface{}{
		k.RegionID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkRegion) deleteSQL() Query {
	return Query{DeletePkRegion, []interface{}{
		k.RegionID,
	}}
}

const (
	SelectPkRegion = `
		SELECT 
			"region_id",
			"region_description"
		FROM "public"."region" WHERE ("region_id") = ($1) LIMIT 1`
	UpdatePkRegion = `
		UPDATE "public"."region" __ut__
		SET "region_id" = COALESCE(__ch__."region_id", __ut__."region_id"),
			"region_description" = COALESCE(__ch__."region_description", __ut__."region_description")
		FROM (SELECT * FROM json_populate_record(null::"public"."region", $2)) __ch__
		WHERE (__ut__."region_id") = ($1)`
	DeletePkRegion = `
		DELETE FROM "public"."region"
		WHERE ("region_id") = ($1)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
