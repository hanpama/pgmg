// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package employees

import (
	"encoding/json"
	"time"
)

type Record struct {
	EmployeeID      int16      `json:"employee_id"`
	LastName        string     `json:"last_name"`
	FirstName       string     `json:"first_name"`
	Title           *string    `json:"title"`
	TitleOfCourtesy *string    `json:"title_of_courtesy"`
	BirthDate       *time.Time `json:"birth_date"`
	HireDate        *time.Time `json:"hire_date"`
	Address         *string    `json:"address"`
	City            *string    `json:"city"`
	Region          *string    `json:"region"`
	PostalCode      *string    `json:"postal_code"`
	Country         *string    `json:"country"`
	HomePhone       *string    `json:"home_phone"`
	Extension       *string    `json:"extension"`
	Photo           []byte     `json:"photo"`
	Notes           *string    `json:"notes"`
	ReportsTo       *int16     `json:"reports_to"`
	PhotoPath       *string    `json:"photo_path"`
}

type PkEmployees struct {
	EmployeeID int16 `json:"employee_id"`
}

type EmployeeID int16
type LastName string
type FirstName string
type Title string
type TitleOfCourtesy string
type BirthDate time.Time
type HireDate time.Time
type Address string
type City string
type Region string
type PostalCode string
type Country string
type HomePhone string
type Extension string
type Photo []byte
type Notes string
type ReportsTo int16
type PhotoPath string

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.EmployeeID,
		&r.LastName,
		&r.FirstName,
		&r.Title,
		&r.TitleOfCourtesy,
		&r.BirthDate,
		&r.HireDate,
		&r.Address,
		&r.City,
		&r.Region,
		&r.PostalCode,
		&r.Country,
		&r.HomePhone,
		&r.Extension,
		&r.Photo,
		&r.Notes,
		&r.ReportsTo,
		&r.PhotoPath,
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	employeeID EmployeeID,
	lastName LastName,
	firstName FirstName,
	attrs ...attribute,
) Values {
	return append(Values{
		employeeID,
		lastName,
		firstName,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v EmployeeID) ApplyTo(r *Record)       { r.EmployeeID = (int16)(v) }
func (v EmployeeID) Column() string          { return "employee_id" }
func (v EmployeeID) Value() interface{}      { return (int16)(v) }
func (v LastName) ApplyTo(r *Record)         { r.LastName = (string)(v) }
func (v LastName) Column() string            { return "last_name" }
func (v LastName) Value() interface{}        { return (string)(v) }
func (v FirstName) ApplyTo(r *Record)        { r.FirstName = (string)(v) }
func (v FirstName) Column() string           { return "first_name" }
func (v FirstName) Value() interface{}       { return (string)(v) }
func (v Title) ApplyTo(r *Record)            { r.Title = (*string)(&v) }
func (v Title) Column() string               { return "title" }
func (v Title) Value() interface{}           { return (string)(v) }
func (v TitleOfCourtesy) ApplyTo(r *Record)  { r.TitleOfCourtesy = (*string)(&v) }
func (v TitleOfCourtesy) Column() string     { return "title_of_courtesy" }
func (v TitleOfCourtesy) Value() interface{} { return (string)(v) }
func (v BirthDate) ApplyTo(r *Record)        { r.BirthDate = (*time.Time)(&v) }
func (v BirthDate) Column() string           { return "birth_date" }
func (v BirthDate) Value() interface{}       { return (time.Time)(v) }
func (v HireDate) ApplyTo(r *Record)         { r.HireDate = (*time.Time)(&v) }
func (v HireDate) Column() string            { return "hire_date" }
func (v HireDate) Value() interface{}        { return (time.Time)(v) }
func (v Address) ApplyTo(r *Record)          { r.Address = (*string)(&v) }
func (v Address) Column() string             { return "address" }
func (v Address) Value() interface{}         { return (string)(v) }
func (v City) ApplyTo(r *Record)             { r.City = (*string)(&v) }
func (v City) Column() string                { return "city" }
func (v City) Value() interface{}            { return (string)(v) }
func (v Region) ApplyTo(r *Record)           { r.Region = (*string)(&v) }
func (v Region) Column() string              { return "region" }
func (v Region) Value() interface{}          { return (string)(v) }
func (v PostalCode) ApplyTo(r *Record)       { r.PostalCode = (*string)(&v) }
func (v PostalCode) Column() string          { return "postal_code" }
func (v PostalCode) Value() interface{}      { return (string)(v) }
func (v Country) ApplyTo(r *Record)          { r.Country = (*string)(&v) }
func (v Country) Column() string             { return "country" }
func (v Country) Value() interface{}         { return (string)(v) }
func (v HomePhone) ApplyTo(r *Record)        { r.HomePhone = (*string)(&v) }
func (v HomePhone) Column() string           { return "home_phone" }
func (v HomePhone) Value() interface{}       { return (string)(v) }
func (v Extension) ApplyTo(r *Record)        { r.Extension = (*string)(&v) }
func (v Extension) Column() string           { return "extension" }
func (v Extension) Value() interface{}       { return (string)(v) }
func (v Photo) ApplyTo(r *Record)            { r.Photo = ([]byte)(&v) }
func (v Photo) Column() string               { return "photo" }
func (v Photo) Value() interface{}           { return ([]byte)(v) }
func (v Notes) ApplyTo(r *Record)            { r.Notes = (*string)(&v) }
func (v Notes) Column() string               { return "notes" }
func (v Notes) Value() interface{}           { return (string)(v) }
func (v ReportsTo) ApplyTo(r *Record)        { r.ReportsTo = (*int16)(&v) }
func (v ReportsTo) Column() string           { return "reports_to" }
func (v ReportsTo) Value() interface{}       { return (int16)(v) }
func (v PhotoPath) ApplyTo(r *Record)        { r.PhotoPath = (*string)(&v) }
func (v PhotoPath) Column() string           { return "photo_path" }
func (v PhotoPath) Value() interface{}       { return (string)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
