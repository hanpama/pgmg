// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package employees

func Insert(vss ...Values) Query {
	return query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "public"."employees" (
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"
		)
		SELECT
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"
		FROM json_populate_recordset(null::"public"."employees", $1)`
	InsertReturningSQL = `
		INSERT INTO "public"."employees" (
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"
		)
		SELECT
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"
		FROM json_populate_recordset(null::"public"."employees", $1)
		RETURNING
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"`
)

func (k PkEmployees) selectSQL() Query {
	return selectPkEmployeesQuery{k}
}
func (k PkEmployees) updateSQL(args ...attribute) Query {
	return query{UpdatePkEmployees, []interface{}{
		k.EmployeeID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkEmployees) deleteSQL() Query {
	return query{DeletePkEmployees, []interface{}{
		k.EmployeeID,
	}}
}

const (
	SelectPkEmployees = `
		SELECT 
			"employee_id",
			"last_name",
			"first_name",
			"title",
			"title_of_courtesy",
			"birth_date",
			"hire_date",
			"address",
			"city",
			"region",
			"postal_code",
			"country",
			"home_phone",
			"extension",
			"photo",
			"notes",
			"reports_to",
			"photo_path"
		FROM "public"."employees" WHERE ("employee_id") = ($1) LIMIT 1`
	UpdatePkEmployees = `
		UPDATE "public"."employees" __ut__
		SET "employee_id" = COALESCE(__ch__."employee_id", __ut__."employee_id"),
			"last_name" = COALESCE(__ch__."last_name", __ut__."last_name"),
			"first_name" = COALESCE(__ch__."first_name", __ut__."first_name"),
			"title" = COALESCE(__ch__."title", __ut__."title"),
			"title_of_courtesy" = COALESCE(__ch__."title_of_courtesy", __ut__."title_of_courtesy"),
			"birth_date" = COALESCE(__ch__."birth_date", __ut__."birth_date"),
			"hire_date" = COALESCE(__ch__."hire_date", __ut__."hire_date"),
			"address" = COALESCE(__ch__."address", __ut__."address"),
			"city" = COALESCE(__ch__."city", __ut__."city"),
			"region" = COALESCE(__ch__."region", __ut__."region"),
			"postal_code" = COALESCE(__ch__."postal_code", __ut__."postal_code"),
			"country" = COALESCE(__ch__."country", __ut__."country"),
			"home_phone" = COALESCE(__ch__."home_phone", __ut__."home_phone"),
			"extension" = COALESCE(__ch__."extension", __ut__."extension"),
			"photo" = COALESCE(__ch__."photo", __ut__."photo"),
			"notes" = COALESCE(__ch__."notes", __ut__."notes"),
			"reports_to" = COALESCE(__ch__."reports_to", __ut__."reports_to"),
			"photo_path" = COALESCE(__ch__."photo_path", __ut__."photo_path")
		FROM (SELECT * FROM json_populate_record(null::"public"."employees", $2)) __ch__
		WHERE (__ut__."employee_id") = ($1)`
	DeletePkEmployees = `
		DELETE FROM "public"."employees"
		WHERE ("employee_id") = ($1)`
)

type selectPkEmployeesQuery struct{ key PkEmployees }

func (q selectPkEmployeesQuery) SQL() string         { return SelectPkEmployees }
func (q selectPkEmployeesQuery) Args() []interface{} { return []interface{}{q.key.EmployeeID} }

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query interface {
	SQL() string
	Args() []interface{}
}

type query struct {
	sql  string
	args []interface{}
}

func (q query) SQL() string         { return q.sql }
func (q query) Args() []interface{} { return q.args }
