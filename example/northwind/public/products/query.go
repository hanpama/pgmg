// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package products

func Insert(vss ...Values) Query {
	return Query{InsertSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func InsertReturning(vss ...Values) Query {
	return Query{InsertReturningSQL, []interface{}{string(mustMarshalJSON(vss))}}
}
func Select(k key) Query {
	return k.selectSQL()
}
func Update(k key, args ...attribute) Query {
	return k.updateSQL(args...)
}
func Delete(k key) Query {
	return k.deleteSQL()
}

const (
	InsertSQL = `
		INSERT INTO "public"."products" (
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"
		)
		SELECT
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"
		FROM json_populate_recordset(null::"public"."products", $1)`
	InsertReturningSQL = `
		INSERT INTO "public"."products" (
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"
		)
		SELECT
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"
		FROM json_populate_recordset(null::"public"."products", $1)
		RETURNING
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"`
)

func (k PkProducts) selectSQL() Query {
	return Query{SelectPkProducts, []interface{}{
		k.ProductID,
	}}
}
func (k PkProducts) updateSQL(args ...attribute) Query {
	return Query{UpdatePkProducts, []interface{}{
		k.ProductID,
		string(mustMarshalJSON(Values(args))),
	}}
}
func (k PkProducts) deleteSQL() Query {
	return Query{DeletePkProducts, []interface{}{
		k.ProductID,
	}}
}

const (
	SelectPkProducts = `
		SELECT 
			"product_id",
			"product_name",
			"supplier_id",
			"category_id",
			"quantity_per_unit",
			"unit_price",
			"units_in_stock",
			"units_on_order",
			"reorder_level",
			"discontinued"
		FROM "public"."products" WHERE ("product_id") = ($1) LIMIT 1`
	UpdatePkProducts = `
		UPDATE "public"."products" __ut__
		SET "product_id" = COALESCE(__ch__."product_id", __ut__."product_id"),
			"product_name" = COALESCE(__ch__."product_name", __ut__."product_name"),
			"supplier_id" = COALESCE(__ch__."supplier_id", __ut__."supplier_id"),
			"category_id" = COALESCE(__ch__."category_id", __ut__."category_id"),
			"quantity_per_unit" = COALESCE(__ch__."quantity_per_unit", __ut__."quantity_per_unit"),
			"unit_price" = COALESCE(__ch__."unit_price", __ut__."unit_price"),
			"units_in_stock" = COALESCE(__ch__."units_in_stock", __ut__."units_in_stock"),
			"units_on_order" = COALESCE(__ch__."units_on_order", __ut__."units_on_order"),
			"reorder_level" = COALESCE(__ch__."reorder_level", __ut__."reorder_level"),
			"discontinued" = COALESCE(__ch__."discontinued", __ut__."discontinued")
		FROM (SELECT * FROM json_populate_record(null::"public"."products", $2)) __ch__
		WHERE (__ut__."product_id") = ($1)`
	DeletePkProducts = `
		DELETE FROM "public"."products"
		WHERE ("product_id") = ($1)`
)

type key interface {
	selectSQL() Query
	updateSQL(args ...attribute) Query
	deleteSQL() Query
}

type Query struct {
	sql  string
	args []interface{}
}

func (q Query) SQL() string         { return q.sql }
func (q Query) Args() []interface{} { return q.args }
