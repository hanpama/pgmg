// Code generated by github.com/hanpama/pgmg. DO NOT EDIT.
package suppliers

import (
	"encoding/json"
)

type Record struct {
	SupplierID   int16   `json:"supplier_id"`
	CompanyName  string  `json:"company_name"`
	ContactName  *string `json:"contact_name"`
	ContactTitle *string `json:"contact_title"`
	Address      *string `json:"address"`
	City         *string `json:"city"`
	Region       *string `json:"region"`
	PostalCode   *string `json:"postal_code"`
	Country      *string `json:"country"`
	Phone        *string `json:"phone"`
	Fax          *string `json:"fax"`
	Homepage     *string `json:"homepage"`
}

type PkSuppliers struct {
	SupplierID int16 `json:"supplier_id"`
}

type SupplierID int16
type CompanyName string
type ContactName string
type ContactTitle string
type Address string
type City string
type Region string
type PostalCode string
type Country string
type Phone string
type Fax string
type Homepage string

func (r *Record) Receive() []interface{} {
	return []interface{}{
		&r.SupplierID,
		&r.CompanyName,
		&r.ContactName,
		&r.ContactTitle,
		&r.Address,
		&r.City,
		&r.Region,
		&r.PostalCode,
		&r.Country,
		&r.Phone,
		&r.Fax,
		&r.Homepage,
	}
}

type Recordset []Record

func (rs *Recordset) Receive() []interface{} {
	*rs = append(*rs, Record{})
	return (*rs)[len(*rs)-1].Receive()
}

type Values []attribute

func InputValues(
	supplierID SupplierID,
	companyName CompanyName,
	attrs ...attribute,
) Values {
	return append(Values{
		supplierID,
		companyName,
	}, attrs...)
}
func (vs Values) ApplyTo(r *Record) {
	for _, v := range vs {
		v.ApplyTo(r)
	}
}

func (vs Values) MarshalJSON() (b []byte, err error) {
	r := make(map[string]interface{})
	for _, v := range vs {
		r[v.Column()] = v.Value()
	}
	return json.Marshal(r)
}

type attribute interface {
	ApplyTo(*Record)
	Column() string
	Value() interface{}
}

func (v SupplierID) ApplyTo(r *Record)    { r.SupplierID = (int16)(v) }
func (v SupplierID) Column() string       { return "supplier_id" }
func (v SupplierID) Value() interface{}   { return (int16)(v) }
func (v CompanyName) ApplyTo(r *Record)   { r.CompanyName = (string)(v) }
func (v CompanyName) Column() string      { return "company_name" }
func (v CompanyName) Value() interface{}  { return (string)(v) }
func (v ContactName) ApplyTo(r *Record)   { r.ContactName = (*string)(&v) }
func (v ContactName) Column() string      { return "contact_name" }
func (v ContactName) Value() interface{}  { return (string)(v) }
func (v ContactTitle) ApplyTo(r *Record)  { r.ContactTitle = (*string)(&v) }
func (v ContactTitle) Column() string     { return "contact_title" }
func (v ContactTitle) Value() interface{} { return (string)(v) }
func (v Address) ApplyTo(r *Record)       { r.Address = (*string)(&v) }
func (v Address) Column() string          { return "address" }
func (v Address) Value() interface{}      { return (string)(v) }
func (v City) ApplyTo(r *Record)          { r.City = (*string)(&v) }
func (v City) Column() string             { return "city" }
func (v City) Value() interface{}         { return (string)(v) }
func (v Region) ApplyTo(r *Record)        { r.Region = (*string)(&v) }
func (v Region) Column() string           { return "region" }
func (v Region) Value() interface{}       { return (string)(v) }
func (v PostalCode) ApplyTo(r *Record)    { r.PostalCode = (*string)(&v) }
func (v PostalCode) Column() string       { return "postal_code" }
func (v PostalCode) Value() interface{}   { return (string)(v) }
func (v Country) ApplyTo(r *Record)       { r.Country = (*string)(&v) }
func (v Country) Column() string          { return "country" }
func (v Country) Value() interface{}      { return (string)(v) }
func (v Phone) ApplyTo(r *Record)         { r.Phone = (*string)(&v) }
func (v Phone) Column() string            { return "phone" }
func (v Phone) Value() interface{}        { return (string)(v) }
func (v Fax) ApplyTo(r *Record)           { r.Fax = (*string)(&v) }
func (v Fax) Column() string              { return "fax" }
func (v Fax) Value() interface{}          { return (string)(v) }
func (v Homepage) ApplyTo(r *Record)      { r.Homepage = (*string)(&v) }
func (v Homepage) Column() string         { return "homepage" }
func (v Homepage) Value() interface{}     { return (string)(v) }

func mustMarshalJSON(v interface{}) []byte {
	b, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return b
}
